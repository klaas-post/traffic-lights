//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
typedef USINT *_PVOIDL;

typedef UDINT ENV_Status; 
    #define ENV_NoVariableName 0
    #define ENV_ValidValue 1
    #define ENV_NoInterface 2
    #define ENV_VariableNameNotFound 3
    #define ENV_NoValueString 4

typedef struct 
  {
    long Valid : 1;  //! <Type Comment="must be 1 to Start FileEx work" Name="FeSetup.Valid"/>
    long FileorRam : 1;  //! <Type Comment="0= work in File 1= Work File" Name="FeSetup.FileorRam"/>
    long EnableChecksum : 1;  //! <Type Comment="0=no Checksum; 1=Calculate Checksum, increased write access on the CF card" Name="FeSetup.EnableChecksum"/>
    long Encrypt : 1;  //! <Type Comment="0=no encryption; 1=encrypt file, increased write access on the CF card" Name="FeSetup.Encrypt"/>
  }FeSetup;

typedef struct   //! <Type Comment="Status Flag für IO Daten" Name="IO_FLAG"/>
  {
    short WrongHW : 1;  //! <Type Comment="Falsche Hardware verbunden" Name="IO_FLAG.WrongHW"/>
    short NoHW : 1;  //! <Type Comment="Keine Hardware verbunden" Name="IO_FLAG.NoHW"/>
    short NoCalibration : 1;  //! <Type Comment="Keine Kalibrierungsdaten im Modul-EEPROM" Name="IO_FLAG.NoCalibration"/>
    short ParaChkWrong : 1;  //! <Type Comment="Die Parameter-Checksumme ist falsch" Name="IO_FLAG.ParaChkWrong"/>
    short PhysicHiLimit : 1;  //! <Type Comment="IO ist am oberen physikalischen Limit" Name="IO_FLAG.PhysicHiLimit"/>
    short PhysicLoLimit : 1;  //! <Type Comment="IO ist am unteren physikalischen Limit" Name="IO_FLAG.PhysicLoLimit"/>
    short Invert : 1;  //! <Type Comment="Daten sind invertiert" Name="IO_FLAG.Invert"/>
    short dummy0 : 6;
    short OnDummyMode : 1;  //! <Type Comment="1 = Objekt ist im Dummymodus (nicht refreshed)" Name="IO_FLAG.OnDummyMode"/>
    short NotConnected : 1;  //! <Type Comment="1 = Objekt ist nicht verbunden" Name="IO_FLAG.NotConnected"/>
    short PhysicAccessOff : 1;  //! <Type Comment="1 = kein physikalischer Zugriff erlaubt" Name="IO_FLAG.PhysicAccessOff"/>
  }IO_FLAG;

#pragma pack(push, 1)
typedef struct IO_State 
  {
    IO_FLAG uiIO_Flags;
    UINT uiChNo;
  } IO_State;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_TimeStamp 
  {
    UDINT valLow;
    DINT valHigh;
  } OPCUA_TimeStamp;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_Alarm 
  {
    OPCUA_TimeStamp TimeStamp;
    UDINT Cycle;
    DINT Active;
    CHAR *Number;
    CHAR *Description;
  } OPCUA_Alarm;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_AlarmUC 
  {
    OPCUA_TimeStamp TimeStamp;
    UDINT Cycle;
    DINT Active;
    UINT *Number;
    UINT *Description;
  } OPCUA_AlarmUC;
#pragma pack(pop)

typedef INT OPCUA_ArrayType_Enum;   //! <Type Comment="Defines if the data value represents a scalar value or an array." Name="OPCUA_ArrayType_Enum"/>
    #define OpcUa_VariantArrayType_Scalar 0
    #define OpcUa_VariantArrayType_Array 1
    #define OpcUa_VariantArrayType_Matrix 2

#pragma pack(push, 1)
typedef struct OPCUA_Change 
  {
    OPCUA_TimeStamp TimeStamp;
    UDINT Cycle;
    CHAR *DatasetId;
    CHAR *Dataset;
    CHAR *ParameterId;
    CHAR *UserId;
    CHAR *User;
    CHAR *Reason;
  } OPCUA_Change;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_ChangeUC 
  {
    OPCUA_TimeStamp TimeStamp;
    UDINT Cycle;
    CHAR *DatasetId;
    CHAR *Dataset;
    CHAR *ParameterId;
    UINT *UserId;
    UINT *User;
    UINT *Reason;
  } OPCUA_ChangeUC;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_ClientDiagnosticInfo 
  {
    CHAR *ApplicationUri;  //! <Type Comment="Client / session application uri." Name="OPCUA_ClientDiagnosticInfo.ApplicationUri"/>
    CHAR *ApplicationName;  //! <Type Comment="Client / session application name." Name="OPCUA_ClientDiagnosticInfo.ApplicationName"/>
    OPCUA_TimeStamp Start;  //! <Type Comment="Timestamp when the client created the session." Name="OPCUA_ClientDiagnosticInfo.Start"/>
    OPCUA_TimeStamp LastTransfer;  //! <Type Comment="Timestamp when the client exchanged some data with the server (regardless which kind of information)" Name="OPCUA_ClientDiagnosticInfo.LastTransfer"/>
    UDINT ItemsBrowsed;  //! <Type Comment="Information about how much items have been browsed in the session." Name="OPCUA_ClientDiagnosticInfo.ItemsBrowsed"/>
    UDINT ItemsRead;  //! <Type Comment="Information about how much items have been read in the session." Name="OPCUA_ClientDiagnosticInfo.ItemsRead"/>
    UDINT ItemsWritten;  //! <Type Comment="Information about how much items have been written in the session." Name="OPCUA_ClientDiagnosticInfo.ItemsWritten"/>
    void *NextDiagnosticInfo;  //! <Type Comment="Pointer to the next item in the list." Name="OPCUA_ClientDiagnosticInfo.NextDiagnosticInfo"/>
  } OPCUA_ClientDiagnosticInfo;
#pragma pack(pop)

typedef UDINT OPCUA_DataTypeId; 
    #define Boolean 1
    #define Int8 2
    #define Int16 4
    #define Int32 6
    #define Int64 8
    #define UInt8 3
    #define UInt16 5
    #define UInt32 7
    #define UInt64 9
    #define Float 10
    #define Double 11
    #define Text 12
    #define OPC_DateTime 13
    #define OPC_ByteString 15
    #define OPC_LocalizedText 21
    #define OPC_TimeZoneData 8912
    #define OPC_NodeId 17
    #define OPC_EnumValueType 7594
    #define ExtensionObject 22
    #define MemoryBoolean 1000001
    #define MemoryInt8 1000002
    #define MemoryInt16 1000004
    #define MemoryInt32 1000006
    #define MemoryUInt8 1000003
    #define MemoryUInt16 1000005
    #define MemoryUInt32 1000007
    #define MemoryFloat 1000010
    #define MemoryDouble 1000011
    #define MemoryText 1000012
    #define MemoryOPC_DateTime 1000013
    #define MemoryOPC_ByteString 1000015
    #define MemoryOPC_LocalizedText 1000021
    #define MemoryOPC_TimeZoneData 1008912
    #define MemoryOPC_NodeId 1000017
    #define MemoryExtensionObject 1000022
    #define ServerPointsToBoolean 2000001
    #define ServerPointsToInt8 2000002
    #define ServerPointsToInt16 2000004
    #define ServerPointsToInt32 2000005
    #define ServerPointsToUInt8 2000003
    #define ServerPointsToUInt16 2000005
    #define ServerPointsToUInt32 2000007
    #define ServerPointsToFloat 2000010
    #define ServerPointsToDouble 2000011
    #define ServerPointsToText 2000012
    #define ServerPointsToOPC_DateTime 2000013
    #define ServerPointsToOPC_ByteString 2000015
    #define ServerPointsToOPC_LocalizedText 2000021
    #define ServerPointsToOPC_TimeZoneData 2008912
    #define ServerPointsToOPC_NodeId 2000017
    #define ServerPointsToExtensionObject 2000022

typedef UDINT OPCUA_MessageSecurityMode_Enum; 
    #define OPCUA_SecurityMode_None 1
    #define OPCUA_SecurityMode_Sign 2
    #define OPCUA_SecurityMode_SignAndEncrypt 3

#pragma pack(push, 1)
typedef struct OPCUA_NodeId   //! <Type Comment="Representing an OpcUa_NodeId in Lasal. There are only two types of identifier defined: numeric, and string identifier." Name="OPCUA_NodeId"/>
  {
    UINT IdentifierType;  //! <Type Comment="The node id has one of the following types:&#13;&#10;&#13;&#10;0..Numeric identifier&#13;&#10;1..String identifier&#13;&#10;2..Numeric identifier" Name="OPCUA_NodeId.IdentifierType"/>
    UINT NamespaceIndex;  //! <Type Comment="Namespace of the node id." Name="OPCUA_NodeId.NamespaceIndex"/>
    UDINT NumericIdentifier;  //! <Type Comment="The numeric identifier." Name="OPCUA_NodeId.NumericIdentifier"/>
    CHAR *StringIdentifier;  //! <Type Comment="The string identifier." Name="OPCUA_NodeId.StringIdentifier"/>
  } OPCUA_NodeId;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_NodeInfo 
  {
    OPCUA_NodeId NodeId;
    OPCUA_DataTypeId DataTypeId;
    UDINT LasalId;
  } OPCUA_NodeInfo;
#pragma pack(pop)

typedef UDINT OPCUA_SecurityPolicy_Enum; 
    #define OPCUA_SecurityPolicy_None 0
    #define OPCUA_SecurityPolicy_Basic256 1
    #define OPCUA_SecurityPolicy_Basic256Sha256 2
    #define OPCUA_SecurityPolicy_Aes128Sha256Rsa0aep 3

#pragma pack(push, 1)
typedef struct OPCUA_RemoteServerDescription 
  {
    CHAR *Id;
    CHAR *Url;  //! <Type Comment="DEPRECATED: Do not use the URL anymore. The only relevant information is the Endpoint defined in this type." Name="OPCUA_RemoteServerDescription.Url"/>
    CHAR *Endpoint;
    OPCUA_MessageSecurityMode_Enum MessageSecurityMode;
    OPCUA_SecurityPolicy_Enum SecurityPolicy;
    CHAR *User;
    CHAR *Password;
    UDINT ConnectionHandle;
  } OPCUA_RemoteServerDescription;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct OPCUA_StandardAlarm 
  {
    OPCUA_TimeStamp TimeOn;
    OPCUA_TimeStamp TimeOff;
    DINT Number;
    DINT Active;
    DINT Acknowledged;
    DINT Typ;
    REAL Para1;
    REAL Para2;
    REAL Para3;
    CHAR *Description;
  } OPCUA_StandardAlarm;
#pragma pack(pop)

typedef HwBase *pHwBase;

typedef HwBaseCDIAS *pHwBaseCDIAS;

typedef OPCUA_Alarm *ptrOPCUA_Alarm;

typedef OPCUA_AlarmUC *ptrOPCUA_AlarmUC;

typedef OPCUA_ClientDiagnosticInfo *ptrOPCUA_ClientDiagnosticInfo;

typedef OPCUA_NodeId *ptrOPCUA_NodeId;

typedef OPCUA_NodeInfo *ptrOPCUA_NodeInfo;

typedef OPCUA_RemoteServerDescription *ptrOPCUA_RemoteServerDescription;

typedef OPCUA_StandardAlarm *ptrOPCUA_StandardAlarm;

typedef UDINT SafetyConfigStateType; 
    #define _ModuleNotFound 0
    #define _SafetyClassOK 1
    #define _ReinitConfig 2
    #define _UnsafeVarNotFound 3
    #define _ModFromCfgNotFound 4
    #define _MemAllocFailed 5
    #define _ReadFWVerFailed 6
    #define _UnknownCfgError 7
    #define _WaitForSynchronicity 8
    #define _AsyncComError 9
    #define _DOsIncreasedRestartApp 10
    #define _LostPowerSupply 11
    #define _WrongSafetyHW 12

#pragma pack(push, 1)
typedef struct SafetyDiagInfo 
  {
    USINT uControllerID;  //! <Type Comment="ID of µController (0 = µC1, else µC2)" Name="SafetyDiagInfo.uControllerID"/>
    USINT ActErrorCode;  //! <Type Comment="actual error code" Name="SafetyDiagInfo.ActErrorCode"/>
    USINT FirstErrorCode;  //! <Type Comment="code of first error that lead to an error state" Name="SafetyDiagInfo.FirstErrorCode"/>
    UDINT ReasonCode0;  //! <Type Comment="reason for error (meaning depends on actual error code)" Name="SafetyDiagInfo.ReasonCode0"/>
    UDINT ReasonCode1;  //! <Type Comment="reason for error (meaning depends on actual error code)" Name="SafetyDiagInfo.ReasonCode1"/>
  } SafetyDiagInfo;
#pragma pack(pop)

#pragma pack(push, 1)
typedef struct SafetyDiagState 
  {
    USINT RunState;  //! <Type Comment=" 1..POST&#13;&#10; 2..SERVICE&#13;&#10; 4..ERROR&#13;&#10; 8..IDLE&#13;&#10;16..CHK_CFG&#13;&#10;32..OP_TEMP&#13;&#10;64..OP" Name="SafetyDiagState.RunState"/>
    USINT ConfigState;  //! <Type Comment=" 1..INVALID&#13;&#10; 2..NOT_CONFIGURED&#13;&#10; 4..CONFIGURED_NOT_DEPLOYED_NOT_VERIFIED&#13;&#10; 8..CONFIGURED_AND_VERIFIED&#13;&#10;16..CONFIGURED_DEPLOYED_NOT_VERIFIED&#13;&#10;36..CONFIGURED_NOT_DEPLOYED_NOT_VERIFIED_DEV&#13;&#10;48..CONFIGURED_DEPLOYED_NOT_VERIFIED_DEV" Name="SafetyDiagState.ConfigState"/>
    USINT LoginLevel;  //! <Type Comment="0..not logged in&#13;&#10;1..debug&#13;&#10;2..configuration&#13;&#10;3..general" Name="SafetyDiagState.LoginLevel"/>
    UINT ErrorCounterIOState;  //! <Type Comment="Is increased on change of the error state of any input or output" Name="SafetyDiagState.ErrorCounterIOState"/>
  } SafetyDiagState;
#pragma pack(pop)

typedef UDINT t_e_VaranErrors; 
    #define _ClassOk 0
    #define _NotInitialized 1
    #define _CallBackError 2
    #define _RequiredError 3
    #define _RootError 4
    #define _NoHardware 5
    #define _WrongHardware 6
    #define _CreateDOFailed 7
    #define _DirectAccessFailed 8
    #define _PllError 9
    #define _TimeoutInInit 10
    #define _HardwareRequiredIRQ 11
    #define _HardwareNotRequiredIRQ 12
    #define _HardwareFatalErrorIRQ 13
    #define _ManagerError 14
    #define _DisableError 15
    #define _EnableError 16
    #define _MultipleError 17
    #define _SPIError 18
    #define _ErrorBootImageFPGA 19
    #define _NoCDIASInterface 20
    #define _EEPromError 21
    #define _NoVaranInterface 22
    #define _MemoryFault 23
    #define _TimesliceError 24
    #define _TimesliceErrorIRQ 25
    #define _WatchdogError 26
    #define _VaranTimeError 27
    #define _DiasTimeError 28
    #define _DORamFull 29
    #define _PortNoLink 30
    #define _VaranDriverNotExists 31
    #define _WrongDOLType 32
    #define _WrongRunStatus 33
    #define _DOHandleInvalid 34
    #define _DOCmdInvalid 35
    #define _ManagerNotExists 36
    #define _DOLAddressInvalid 37
    #define _UnknownCommand 38
    #define _ComponentNotExists 39
    #define _ClientNotExists 40
    #define _CdiasEEPromNotExists 41
    #define _CdiasEEPromNoGrant 42
    #define _CdiasEEPromNack 43
    #define _PortNotExists 44
    #define _PortIsUplink 45
    #define _NoMutex 46
    #define _NoTask 47
    #define _IDNotFound 48
    #define _IDNotInitialized 49
    #define _InvalidDeviceAddress 50
    #define _CallbackNotHandled 51
    #define _NoMem 52
    #define _NoLegacyWd 53
    #define _AdminDOLExecutionError 54
    #define _DADOLExecutionError 55
    #define _SPIFlashNoAccess 56
    #define _ClientNotready 57
    #define _TimeoutVaran 58
    #define _UnknownFault 59
    #define _DiasError 60
    #define _DeviceError 61
    #define _VaranTimeWarning 62
    #define _OnlyASYSupported 63
    #define _InvalidSerialNo 64
    #define _CDIASRequiredError 65
    #define _DIASRequiredError 66
    #define _NoCalibDataFound 67
    #define _ModuleFoundButManagerIsOff 68
    #define _InvalidConfguration 69
    #define _ClientDisabled 70
    #define _ClientCantEnable 71
    #define _CdiasAddressInvalid 72
    #define _SPIFlashInvalid 73
    #define _SPIDOLIDInvalid 74
    #define _SPIDOLInvalid 75
    #define _SPIRequiredListError 76
    #define _SPIChksumError 77
    #define _ParameterInvalid 78
    #define _DOTypeNotSupported 79
    #define _DMAError 80
    #define _PropertyIDInvalid 81
    #define _PropertyValueInvalid 82
    #define _DONumberOverflow 83
    #define _APIUsageNotAllowed 84
    #define _NodeTypeWrong 85
    #define _DataLengthInvalid 86
    #define _DOTypeInvalid 87
    #define _OperationNotAllowed 88
    #define _NodeNumberOverflow 89
    #define _NoHandleFound 90
    #define _TopologyNotAllowed 91

#pragma pack(push, 1)
typedef struct t_s_ModulInfo 
  {
    HINT Kennung;
    void *p_This;
  } t_s_ModulInfo;
#pragma pack(pop)

