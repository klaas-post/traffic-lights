//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include <.\lsl_st_sysenv.h>

(*!
<Class
	Name               = "ENVLib"
	Revision           = "1.0"
	GUID               = "{3EEC87CC-4233-4A8E-84B8-6B8BC45CD6F7}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(398,120)"
	Comment            = "provides the basic methods to handle&#13;&#10;envirionment variables">
	<Channels>
		<Server Name="ClassSvr" GUID="{4A73F1AB-96E3-4B97-9381-A0FFBE7D1886}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\lsl_st_sysenv.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="hötant"/>
		<Dokumentation Revision="1.0" Date="2011-09-21" Author="hötant" Company="Sigmatek" Description="creation of class"/>
	</RevDoku>
</Class>
*)
ENVLib : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
		pSysenv 	: ^OS_SYSENV;			//! <Variable Comment="internal variable to call the &#13;&#10;OS functions" Name="pSysenv"/>
		InterfaceAvailable 	: BOOL;			//! <Variable Comment="0..no Interface available&#13;&#10;1..Interface available" Name="InterfaceAvailable"/>
  //Functions:
				//! <Function Comment="initialize the interface" Name="ENVLib"/>
	FUNCTION ENVLib
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
				//! <Function Comment="this fuction brings you the value of an environment&#13;&#10;variable . ( SETENV XXXX YY in autoexec.lsl )" Name="GetEnvironmentVariable"/>
	FUNCTION GLOBAL GetEnvironmentVariable
		VAR_INPUT
			pVariableName 	: ^CHAR;			//! <Variable Comment="insert the name of the environment variable you are interested&#13;&#10;( SETENV XXXX YY in autoexec.lsl -&gt;&#13;&#10;insert &quot;XXXX&quot; )&#13;&#10;" Name="GetEnvironmentVariable.pVariableName"/>
			pValue 	: ^CHAR;			//! <Variable Comment="returns the Value of the environment variable&#13;&#10;( SETENV XXXX YY in autoexec.lsl -&gt;&#13;&#10;&quot;YY&quot; )" Name="GetEnvironmentVariable.pValue"/>
			MaxSizeValue 	: UDINT;			//! <Variable Comment="maximum size of written characters" Name="GetEnvironmentVariable.MaxSizeValue"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment=" 1 ..Valid Value&#13;&#10;-1 ..no Interface&#13;&#10;-2 ..no environmen variable with this name found&#13;&#10;" Name="GetEnvironmentVariable.retcode"/>
		END_VAR;
				//! <Function Comment="this fuction changes the value of an environment&#13;&#10;variable temporary. " Name="SetEnvironmentVariable"/>
	FUNCTION GLOBAL SetEnvironmentVariable
		VAR_INPUT
			pVariableName 	: ^CHAR;			//! <Variable Comment="insert the name of the environment variable you are interested&#13;&#10;( SETENV XXXX YY in autoexec.lsl -&gt;&#13;&#10;insert &quot;XXXX&quot; )" Name="SetEnvironmentVariable.pVariableName"/>
			pValue 	: ^CHAR;			//! <Variable Comment="insert the value of the environment variable you want to change" Name="SetEnvironmentVariable.pValue"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment=" 1 ..Valid Value&#13;&#10;-1 ..no Interface&#13;&#10;" Name="SetEnvironmentVariable.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ENVLib::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_ENVLIB
1$UINT, 0$UINT, (SIZEOF(::ENVLib))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(656092286), "ENVLib", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::ENVLib.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_ENVLib 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ENVLib] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ENVLib::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_ENVLib, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= ENVLib();

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION ENVLib::ENVLib
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR
  
  // no interface
  InterfaceAvailable := FALSE;

  if OS_CILGet("SYSENV", #pSysenv$void) = SYS_ERR_NONE then
    if pSysenv <> NIL then
      // valid Interface
      InterfaceAvailable := TRUE;
    end_if;
  end_if;
  
	ret_code := C_OK;

END_FUNCTION


FUNCTION GLOBAL ENVLib::GetEnvironmentVariable
	VAR_INPUT
		pVariableName 	: ^CHAR;
		pValue 	: ^CHAR;
		MaxSizeValue 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  if InterfaceAvailable then
    if OS_GETENVVAR(pSysenv, pVariableName, pValue, MaxSizeValue) THEN
      retcode := 1;
    else
      // keine Umgebungsvariable gesetzt
      retcode := -2;
    end_if;
  else
    // Interface nicht gefunden.
    retcode :=  -1;
  end_if;
  
  
  
  

END_FUNCTION


FUNCTION GLOBAL ENVLib::SetEnvironmentVariable
	VAR_INPUT
		pVariableName 	: ^CHAR;
		pValue 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  if InterfaceAvailable then
  
    
    if OS_SETENVVAR(pSysenv, pVariableName, pValue ) then
      retcode := 1;
    else
      retcode := -2;
    end_if;
  else
    // Interface nicht gefunden.
    retcode :=  -1;
  end_if;

END_FUNCTION
