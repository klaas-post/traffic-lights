//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "OPC_UA_Base"
	Revision           = "2.0"
	GUID               = "{3B089600-D7CE-4EDE-B5C3-F42FF399488B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "This class provides the prototypes of all functions which can be called from the OPC_UA core. In general it is not necessary for the application to derive from the class unless a complete new server or client should be implemented. Otherwise application classes shall derive from OPC_UA_Client or OPC_UA_Server.">
	<Channels>
		<Server Name="ClassSvr" GUID="{11C433A2-B965-4FA6-AA68-FA542A478F6D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="OPC_UA" Required="true" Internal="false" Comment="Object channel to OPC_UA"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="MehMar"/>
		<Dokumentation Revision="2.0" Date="2022-07-13" Author="MehMar" Company="Sigmatek" Description="--&gt; Improvement: Additional callbacks for structure handling."/>
		<Dokumentation Revision="1.0" Date="2020-10-28" Author="MehMar" Company="Sigmatek" Description="--&gt; Initial version: Base class of server and client classes."/>
	</RevDoku>
</Class>
*)
OPC_UA_Base : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	OPC_UA 	: CltChCmd_OPC_UA;
  //Variables:
  //Functions:
	
	FUNCTION OPC_UA_Base
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="This method is called cyclically because of the OPC_UA thread.&#13;&#10;&#13;&#10;ONLY overwrite it if you need functions synchron to the OPC_UA thread.&#13;&#10;Otherwise use the background task!" Name="OPC_UA_Thread"/>
	FUNCTION VIRTUAL GLOBAL OPC_UA_Thread;
				//! <Function Comment="Method is used to be overloaded by user and will be called once when opc-ua server will start." Name="FunctStart"/>
	FUNCTION VIRTUAL GLOBAL FunctStart;
				//! <Function Comment="Method is used to be overloaded by user and will be called cyclically when opc-ua-server is running." Name="FunctRun"/>
	FUNCTION VIRTUAL GLOBAL FunctRun;
				//! <Function Comment="Method is used to be overloaded by user and will be called once when opc-ua-server is terminated.&#13;&#10;Normally this method will never be called on a running system." Name="FunctEnd"/>
	FUNCTION VIRTUAL GLOBAL FunctEnd;
				//! <Function Comment="Method is used to be overloaded by user and is used to announce all OPC-UA configuration files to ensure access to user specific data and directories on the PLC." Name="FunctSetUp"/>
	FUNCTION VIRTUAL GLOBAL FunctSetUp
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK" Name="FunctSetUp.retcode"/>
		END_VAR;
				//! <Function Comment="Set a parameter&#13;&#10;&#13;&#10;Use Idx PIDX_OPC_UA_CLIENT (reserved for OPC_UA_Client class)&#13;&#10;&#13;&#10;SubIdx:&#13;&#10;PSIDX_CLI_SET_PUBLISH_TIMEOUT ... Set the timeout for the publisher&#13;&#10;Value: new timeout [ms]&#13;&#10;&#13;&#10;" Name="SetPara"/>
	FUNCTION VIRTUAL GLOBAL SetPara
		VAR_INPUT
			Idx 	: DINT;			//! <Variable Comment="Index of the parameter&#13;&#10;Parameter description see class comment" Name="SetPara.Idx"/>
			SubIdx 	: DINT;			//! <Variable Comment="SubIndex of the parameter&#13;&#10;Parameter description see class comment&#13;&#10;" Name="SetPara.SubIdx"/>
			Value 	: DINT;			//! <Variable Comment="New value for the parameter" Name="SetPara.Value"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Return code&#13;&#10; 0 ... OK&#13;&#10;-1 ... unknown parameter&#13;&#10;-2 ... value not allowed" Name="SetPara.retcode"/>
		END_VAR;
				//! <Function Comment="Can be overwritten for provider initialization purposes." Name="InitProvider"/>
	FUNCTION VIRTUAL GLOBAL InitProvider
		VAR_OUTPUT
			IsReady 	: DINT;			//! <Variable Comment="0 ... OK, ready" Name="InitProvider.IsReady"/>
		END_VAR;
				//! <Function Comment="If necessary, OPC_UA providers can be registered here.&#13;&#10;Method is called by OPC_UA during provider registration phase. " Name="RegisterProvider"/>
	FUNCTION VIRTUAL GLOBAL RegisterProvider
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ProviderRun;
				//! <Function Comment="The method is called by the OPC_UA server each time the connection status to a remote server has changed.&#13;&#10;When a new connection is established (e.g. OpenConnection), this method first reports a connection interruption (which is really true)." Name="CurrentExternalServerStatus"/>
	FUNCTION VIRTUAL GLOBAL CurrentExternalServerStatus
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="describes the remote station - see OpenConnection()" Name="CurrentExternalServerStatus.description"/>
			state 	: DINT;			//! <Variable Comment="actual server status&#13;&#10;0 = connected&#13;&#10;0x808A0000 = OpcUa_BadNotConnected - connection lost&#13;&#10;" Name="CurrentExternalServerStatus.state"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="At the moment, the retcode is disregarded and only prepared for future purposes." Name="CurrentExternalServerStatus.retcode"/>
		END_VAR;
				//! <Function Comment="If the class provides any known types, they will be registered when this function is called. Known types will be put to the encodeable types table which shall happen in this function." Name="RegisterTypes"/>
	FUNCTION VIRTUAL GLOBAL RegisterTypes
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns 0 in case all types have successfully been registered or an OPC_UA error code otherwise." Name="RegisterTypes.retcode"/>
		END_VAR;
				//! <Function Comment="Open a connection.&#13;&#10;This method must be called before a read or write operation - ReadNodes() or WriteNodes() - can be done." Name="OpenConnection"/>
	FUNCTION GLOBAL OpenConnection
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Description of the remote OPC_UA Server of which values have been sent&#13;&#10;&#13;&#10;--&gt; Id = unique identifier for the remote station (e.g. &quot;TEST-1&quot;)&#13;&#10;--&gt; Url of the remote-station (e.g. &quot;opc.tcp://10.10.16.99:4842&quot;)&#13;&#10;--&gt; Endpoint of the remote-station (e.g. &quot;opc.tcp://10.10.16.99:4842&quot;)&#13;&#10;--&gt; ConnectionHandle: this attribute is filled by the OPC UA server. This handle must be used for later read/write operations.&#13;&#10;&#13;&#10;" Name="OpenConnection.description"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = CEC_Success (OK)&#13;&#10;1 = CEC_InvalidHandle (The provided handle for the action is not valid or not valid anymore)&#13;&#10;2 = CEC_InvalidServerDescription (The server description is not complete or contains invalid parameters)&#13;&#10;3 = CEC_TaskNotFound (There is no valid task in the task list matching the provided client information)&#13;&#10;4 = CEC_ConnectionAlreadyExists (The connection is already open for the specified remote station (ServerDescription.Id))&#13;&#10;5 = CEC_InvalidConnectionState (The connection state is invalid for the requested operation)&#13;&#10;6 = CEC_TaskFound (The task which requested an operation was found in the list)&#13;&#10;7 = CEC_InUse (The client information is currently in use so no new connection can be requested until an internal timeout or the connection is established)&#13;&#10;" Name="OpenConnection.retcode"/>
		END_VAR;
				//! <Function Comment="Close a connection." Name="CloseConnection"/>
	FUNCTION GLOBAL CloseConnection
		VAR_INPUT
			connectionHandle 	: UDINT;			//! <Variable Comment="Handle of the connection to be closed. &#13;&#10;This handle was returned by OpenConnection() (ServerDescription.Handle)." Name="CloseConnection.connectionHandle"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK&#13;&#10;1 = InvalidHandle - connection not found" Name="CloseConnection.retcode"/>
		END_VAR;
				//! <Function Comment="With this method, nodes can be read from a remote server." Name="ReadNodes"/>
	FUNCTION GLOBAL ReadNodes
		VAR_INPUT
			connectionHandle 	: UDINT;			//! <Variable Comment="Handle of the connection. &#13;&#10;This handle was returned by OpenConnection() (ServerDescription.Handle)." Name="ReadNodes.connectionHandle"/>
			nodeList 	: ptrOPCUA_NodeInfo;			//! <Variable Comment="specifies the nodes to read &#13;&#10;(a pointer to an array of &quot;OPCUA_NodeInfo objects&quot;)" Name="ReadNodes.nodeList"/>
			count 	: UDINT;			//! <Variable Comment="defines how many nodes should be read (length of the nodeList array)" Name="ReadNodes.count"/>
			taskHandle 	: ^UDINT;			//! <Variable Comment="A pointer to a handle. &#13;&#10;This handle is reassigned by the OPC UA server for each READ and is returned in this field.&#13;&#10;This handle returns all changes (status, statistics, errors)." Name="ReadNodes.taskHandle"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK&#13;&#10;1 = InvalidHandle - if no connection was found for the specified remote station (connectionHandle).&#13;&#10;5 = InvalidConnectionState - if the connection to the remote station is in an invalid state (eg closed)" Name="ReadNodes.retcode"/>
		END_VAR;
				//! <Function Comment="With this method, nodes can be written to a remote server." Name="WriteNodes"/>
	FUNCTION GLOBAL WriteNodes
		VAR_INPUT
			connectionHandle 	: UDINT;			//! <Variable Comment="Handle of the connection. &#13;&#10;This handle was returned by OpenConnection() (ServerDescription.Handle)." Name="WriteNodes.connectionHandle"/>
			nodeList 	: ptrOPCUA_NodeInfo;			//! <Variable Comment="specifies the nodes to write&#13;&#10;(a pointer to an array of &quot;OPCUA_NodeInfo objects&quot;)" Name="WriteNodes.nodeList"/>
			count 	: UDINT;			//! <Variable Comment="defines how many nodes should be written (length of the nodeList array)" Name="WriteNodes.count"/>
			taskHandle 	: ^UDINT;			//! <Variable Comment="A pointer to a handle. &#13;&#10;This handle is reassigned by the OPC UA server for each WRITE and is returned in this field.&#13;&#10;This handle returns all changes (status, statistics, errors)." Name="WriteNodes.taskHandle"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK&#13;&#10;1 = InvalidHandle - if no connection was found for the specified remote station (connectionHandle).&#13;&#10;5 = InvalidConnectionState - if the connection to the remote station is in an invalid state (eg closed)" Name="WriteNodes.retcode"/>
		END_VAR;
				//! <Function Comment="The method is called by the OPC UA server each time the status of the internal state machine has changed.&#13;&#10;&#13;&#10;  0 = Connection_Closed (default value, e.g. after each error)&#13;&#10; -1 = Connection_Error (after each error, the system changes to this status)&#13;&#10;  1 = Connection_GetEndpoint (query desired endpoint of remote station)&#13;&#10; -2 = Connection_WaitForGetEndpoint (waiting for the reply of the remote station to a &quot;GetEndpoint&quot; request)&#13;&#10;  2 = Connection_CreateSession (create a session to the remote station)&#13;&#10; -3 = Connection_WaitForCreateSession (waiting for the reply of the remote station to a &quot;CreateSession&quot; request)&#13;&#10;  3 = Connection_GetNamespaces (query the available namespaces from the server)&#13;&#10; -4 = Connection_WaitForGetNamespaces (waiting for the reply of the remote station to a &quot;GetNamespaces&quot; request)&#13;&#10;  4 = Connection_AlmostConnected (intermediate state after all queries have sucessfully returned)&#13;&#10;  5 = Connection_Connected (connection established, read and write operations allowed)&#13;&#10; -6 = Connection_WaitForAnswer (waiting for the remote station&apos;s response to a read or write request)&#13;&#10; 13 = Connection_CloseSession (request to close the current connection)&#13;&#10;-13 = Connection_WaitForClosing (waiting for the response to a &quot;CloseConnection&quot; request)" Name="CurrentStateMachineStatus"/>
	FUNCTION VIRTUAL GLOBAL CurrentStateMachineStatus
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="describes the remote station - see OpenConnection()" Name="CurrentStateMachineStatus.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="the taskHandle identifies the action that triggered the status change &#13;&#10;(for example, which write or read operation was done)" Name="CurrentStateMachineStatus.taskHandle"/>
			oldState 	: DINT;			//! <Variable Comment="status before the change&#13;&#10; 0 = Connection_Closed&#13;&#10;-1 = Connection_Error&#13;&#10; 1 = Connection_CreateChannel&#13;&#10;-2 = Connection_WaitForCreateChannel&#13;&#10; 2 = Connection_GetEndpoint&#13;&#10;-3 = Connection_WaitForGetEndpoint&#13;&#10; 3 = Connection_CreateSession&#13;&#10;-4 = Connection_WaitForCreateSession&#13;&#10; 4 = Connection_ActivateSession&#13;&#10;-5 = Connection_WaitForActivateSession&#13;&#10; 5 = Connection_Open&#13;&#10;" Name="CurrentStateMachineStatus.oldState"/>
			newState 	: DINT;			//! <Variable Comment="status after the change&#13;&#10; 0 = Connection_Closed&#13;&#10;-1 = Connection_Error&#13;&#10; 1 = Connection_CreateChannel&#13;&#10;-2 = Connection_WaitForCreateChannel&#13;&#10; 2 = Connection_GetEndpoint&#13;&#10;-3 = Connection_WaitForGetEndpoint&#13;&#10; 3 = Connection_CreateSession&#13;&#10;-4 = Connection_WaitForCreateSession&#13;&#10; 4 = Connection_ActivateSession&#13;&#10;-5 = Connection_WaitForActivateSession&#13;&#10; 5 = Connection_Open&#13;&#10;" Name="CurrentStateMachineStatus.newState"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="At the moment, the retcode is disregarded and only prepared for future purposes." Name="CurrentStateMachineStatus.retcode"/>
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called after every successful Read Process of the OPC_UA Client functionality." Name="RemoteReadStatistic"/>
	FUNCTION VIRTUAL GLOBAL RemoteReadStatistic
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Description of the remote OPC_UA Server of which values have been read" Name="RemoteReadStatistic.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="Identifies the action that triggered the status change (e.g., which read/write was done)." Name="RemoteReadStatistic.taskHandle"/>
			count 	: DINT;			//! <Variable Comment="Number of read values" Name="RemoteReadStatistic.count"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="At the moment, the retcode is disregarded and only prepared for future purposes." Name="RemoteReadStatistic.retcode"/>
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called after every successful Write Process of the OPC_UA Client functionality." Name="RemoteWriteStatistic"/>
	FUNCTION VIRTUAL GLOBAL RemoteWriteStatistic
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Description of the remote OPC_UA Server of which values have been sent" Name="RemoteWriteStatistic.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="Identifies the action that triggered the status change (e.g., which read/write was done)." Name="RemoteWriteStatistic.taskHandle"/>
			count 	: DINT;			//! <Variable Comment="Number of sent values" Name="RemoteWriteStatistic.count"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="At the moment, the retcode is disregarded and only prepared for future purposes." Name="RemoteWriteStatistic.retcode"/>
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called whenever a READ-request of a single value has failed." Name="RemoteReadError"/>
	FUNCTION VIRTUAL GLOBAL RemoteReadError
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Description of the corresponding remote OPC_UA Server" Name="RemoteReadError.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="Identifies the action that triggered the status change (e.g., which read/write was done)." Name="RemoteReadError.taskHandle"/>
			node 	: ptrOPCUA_NodeId;			//! <Variable Comment="Description of the variable that could not be read successfully" Name="RemoteReadError.node"/>
			status 	: DINT;			//! <Variable Comment="OPC-UA Errorcode" Name="RemoteReadError.status"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="At the moment, the retcode is disregarded and only prepared for future purposes." Name="RemoteReadError.retcode"/>
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called whenever a WRITE-request of a single value has failed." Name="RemoteWriteError"/>
	FUNCTION VIRTUAL GLOBAL RemoteWriteError
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Description of the corresponding remote OPC_UA Server" Name="RemoteWriteError.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="Identifies the action that triggered the status change (e.g., which read/write was done)." Name="RemoteWriteError.taskHandle"/>
			node 	: ptrOPCUA_NodeId;			//! <Variable Comment="Description of the variable that could not be written successfully" Name="RemoteWriteError.node"/>
			status 	: DINT;			//! <Variable Comment="OPC-UA Errorcode" Name="RemoteWriteError.status"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="At the moment, the retcode is disregarded and only prepared for future purposes." Name="RemoteWriteError.retcode"/>
		END_VAR;
				//! <Function Comment="Callback Method, can be overwritten by user.&#13;&#10;Method is called when the RemoteServerDescription is initialized.&#13;&#10;&#13;&#10;It&apos;s possible now to overwrite the entries of the RemoteServerDescription with own settings (eg. Username &amp; Password)&#13;&#10;&#13;&#10;" Name="InitRemoteServerDescription"/>
	FUNCTION VIRTUAL GLOBAL InitRemoteServerDescription
		VAR_INPUT
			serverDescription 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="structured RemoteServerDescription" Name="InitRemoteServerDescription.serverDescription"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK" Name="InitRemoteServerDescription.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method for historical access data which was requested via the HistoryRead call from a client." Name="CB_HistoryRead"/>
	FUNCTION VIRTUAL GLOBAL CB_HistoryRead
		VAR_INPUT
			noOfResults 	: DINT;			//! <Variable Comment="Number of results found for a HistoryRead call. The &apos;results&apos; array will contain this number of results." Name="CB_HistoryRead.noOfResults"/>
			results 	: ^OPC_UA::tOpcUa_HistoryReadResult;			//! <Variable Comment="The actual data from a call HistoryRead to. The  noOfResults parameter indicates how many results are contained in this array." Name="CB_HistoryRead.results"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the result of the method call of &quot;TranslateBrowsePathsAsStringList()&quot;." Name="CB_TranslateBrowsePathsToNodeIds"/>
	FUNCTION VIRTUAL GLOBAL CB_TranslateBrowsePathsToNodeIds
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_TranslateBrowsePathsToNodeIds.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;TranslateBrowsePaths�" Name="CB_TranslateBrowsePathsToNodeIds.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_TranslateBrowsePathsToNodeIdsResponse;			//! <Variable Comment="response for TranslateBrowsePathsToNodeIds() - structure type tOpcUa_TranslateBrowsePathsToNodeIdsResponse" Name="CB_TranslateBrowsePathsToNodeIds.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_TranslateBrowsePathsToNodeIds.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the result of the method call of &quot;CreateSubscription()&quot;" Name="CB_CreateSubscription"/>
	FUNCTION VIRTUAL GLOBAL CB_CreateSubscription
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_CreateSubscription.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;CreateSubscription�" Name="CB_CreateSubscription.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_CreateSubscriptionResponse;			//! <Variable Comment="response for CreateSubscription() - structure type tOpcUa_CreateSubscriptionResponse" Name="CB_CreateSubscription.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_CreateSubscription.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the result of the method call of &quot;ModifySubscription()&quot;" Name="CB_ModifySubscription"/>
	FUNCTION VIRTUAL GLOBAL CB_ModifySubscription
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_ModifySubscription.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;ModifySubscription�" Name="CB_ModifySubscription.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_ModifySubscriptionResponse;			//! <Variable Comment="response for ModifySubscription() - structure type tOpcUa_ModifySubscriptionResponse&#13;&#10;" Name="CB_ModifySubscription.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_ModifySubscription.retcode"/>
		END_VAR;
				//! <Function Comment="Callback for a call to the function CreateMonitoredItems.&#13;&#10;&#13;&#10;The response parameter contains the status code and the revised data per monitored item which should have been created." Name="CB_CreateMonitoredItems"/>
	FUNCTION VIRTUAL GLOBAL CB_CreateMonitoredItems
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_CreateMonitoredItems.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;CreateMonitoredItems�" Name="CB_CreateMonitoredItems.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_CreateMonitoredItemsResponse;			//! <Variable Comment="response for ModifySubscription() - structure type tOpcUa_ModifySubscriptionResponse" Name="CB_CreateMonitoredItems.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_CreateMonitoredItems.retcode"/>
		END_VAR;
				//! <Function Comment="Callback for the DeleteSubscription method." Name="CB_DeleteSubscriptions"/>
	FUNCTION VIRTUAL GLOBAL CB_DeleteSubscriptions
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_DeleteSubscriptions.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;DeleteSubscriptions&quot;" Name="CB_DeleteSubscriptions.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_DeleteSubscriptionsResponse;			//! <Variable Comment="response for DeleteSubscriptions() - structure type tOpcUa_DeleteSubscriptionsResponse" Name="CB_DeleteSubscriptions.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_DeleteSubscriptions.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the result of the method call of &quot;CallMethods()&quot;" Name="CB_CallMethods"/>
	FUNCTION VIRTUAL GLOBAL CB_CallMethods
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_CallMethods.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;CallMethods�" Name="CB_CallMethods.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_CallMethodsResponse;			//! <Variable Comment="response for CallMethods() - structure type tOpcUa_CallMethodsResponse" Name="CB_CallMethods.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_CallMethods.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the result of the method call of &quot;Publish()&quot;&#13;&#10;&#13;&#10;Note: This function is deprecated and shall not be used anymore. See also CB_PublishStatusChange, CB_PublishKeepAlive, CB_PublishDataChange, and CB_PublishEvents" Name="CB_Publish"/>
	FUNCTION VIRTUAL GLOBAL CB_Publish
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_Publish.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;Publish�" Name="CB_Publish.taskHandle"/>
			response 	: ^OPC_UA::tOpcUa_PublishResponse;			//! <Variable Comment="response for Publish() - structure type tOpcUa_PublishResponse" Name="CB_Publish.response"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_Publish.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the result of the method call of &quot;ReadNodes()&quot;" Name="CB_ReadNodes"/>
	FUNCTION VIRTUAL GLOBAL CB_ReadNodes
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="remote server description � see OpenConnection()" Name="CB_ReadNodes.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="handle of the action that triggered &quot;ReadNodes&quot;" Name="CB_ReadNodes.taskHandle"/>
			valueListCount 	: DINT;			//! <Variable Comment="number of variables in the list" Name="CB_ReadNodes.valueListCount"/>
			valueList 	: ^OPC_UA::tOpcUa_DataValue;			//! <Variable Comment="list with the read variables list entries of the type tOpcUa_DataValue" Name="CB_ReadNodes.valueList"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_ReadNodes.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method: Returns the results of the calls to BeginBrowseList () and BeginBrowseListNext ().&#13;&#10;For evaluation, the method must be overridden by the derived class.&#13;&#10;" Name="CB_BrowseNodes"/>
	FUNCTION VIRTUAL GLOBAL CB_BrowseNodes
		VAR_INPUT
			isValid 	: USINT;			//! <Variable Comment="1 � the browsing result is valid&#13;&#10;x � the browsing result is invalid" Name="CB_BrowseNodes.isValid"/>
			NoOfResults 	: DINT;			//! <Variable Comment="Number of browse results&#13;&#10;Must always be #1 because concurrent browsing to multiple nodes is not supported" Name="CB_BrowseNodes.NoOfResults"/>
			pResults 	: ^OPC_UA::tOpcUa_BrowseResult_Intern_c;			//! <Variable Comment="Pointer to the results&#13;&#10;The results must be copied because they are invalid after the method" Name="CB_BrowseNodes.pResults"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="reserved for future tasks, is not evaluated" Name="CB_BrowseNodes.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method for indicating a status change notificiation.&#13;&#10;This methode should be prefered over CB_Publish in future." Name="CB_PublishStatusChange"/>
	FUNCTION VIRTUAL GLOBAL CB_PublishStatusChange
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Remote server description � see OpenConnection()" Name="CB_PublishStatusChange.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="The corresponding task handle which was used to create the subscription." Name="CB_PublishStatusChange.taskHandle"/>
			status 	: UDINT;			//! <Variable Comment="The new status of the subscription." Name="CB_PublishStatusChange.status"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Reserved for future tasks, not yet evaluated." Name="CB_PublishStatusChange.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method for indicating a keep alive notification from the server.&#13;&#10;This methode should be prefered over CB_Publish() in future." Name="CB_PublishKeepAlive"/>
	FUNCTION VIRTUAL GLOBAL CB_PublishKeepAlive
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Remote server description � see OpenConnection()" Name="CB_PublishKeepAlive.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="The corresponding task handle which was used to create the subscription." Name="CB_PublishKeepAlive.taskHandle"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Reserved for future tasks, not yet evaluated." Name="CB_PublishKeepAlive.retcode"/>
		END_VAR;
				//! <Function Comment="Informs the client about missing notification messages. This information can be used to issue the Republish service to request the missing notification(s)." Name="CB_PublishMissingSequenceNumber"/>
	FUNCTION VIRTUAL GLOBAL CB_PublishMissingSequenceNumber
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Remote server description � see OpenConnection()" Name="CB_PublishMissingSequenceNumber.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="The corresponding task handle which was used to create the subscription." Name="CB_PublishMissingSequenceNumber.taskHandle"/>
			lastNumber 	: UDINT;			//! <Variable Comment="The last sequence number which was received." Name="CB_PublishMissingSequenceNumber.lastNumber"/>
			currentNumber 	: UDINT;			//! <Variable Comment="The current sequence number.&#13;&#10;" Name="CB_PublishMissingSequenceNumber.currentNumber"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Reserved for future tasks, not yet evaluated." Name="CB_PublishMissingSequenceNumber.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method for indicating data change notifications from the server. The values will be deleted after returning from the method. In case the values should be kept, they need to be copied before retuning from the callback.&#13;&#10;This methode should be prefered over CB_Publish() in future." Name="CB_PublishDataChange"/>
	FUNCTION VIRTUAL GLOBAL CB_PublishDataChange
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Remote server description � see OpenConnection()" Name="CB_PublishDataChange.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="The corresponding task handle which was used to create the subscription." Name="CB_PublishDataChange.taskHandle"/>
			changedItems 	: ^OPC_UA::tOpcUa_DataChangeNotification;			//! <Variable Comment="The notification for the items which have changed. " Name="CB_PublishDataChange.changedItems"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Reserved for future tasks, not yet evaluated." Name="CB_PublishDataChange.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method for indicating event notifications from the server. The values will be deleted after returning from the method. In case the values should be kept, they need to be copied before retuning from the callback.&#13;&#10;This methode should be prefered over CB_Publish() in future." Name="CB_PublishEvents"/>
	FUNCTION VIRTUAL GLOBAL CB_PublishEvents
		VAR_INPUT
			description 	: ptrOPCUA_RemoteServerDescription;			//! <Variable Comment="Remote server description � see OpenConnection()" Name="CB_PublishEvents.description"/>
			taskHandle 	: UDINT;			//! <Variable Comment="The corresponding task handle which was used to create the subscription." Name="CB_PublishEvents.taskHandle"/>
			changedItems 	: ^OPC_UA::tOpcUa_EventNotificationList;			//! <Variable Comment="Notification for current events." Name="CB_PublishEvents.changedItems"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Reserved for future tasks, not yet evaluated." Name="CB_PublishEvents.retcode"/>
		END_VAR;
				//! <Function Comment="This callback is called before the first field is decoded. It contains the name of the following structure and its data type ID and encoder type ID." Name="CB_StructFieldsBegin"/>
	FUNCTION VIRTUAL GLOBAL CB_StructFieldsBegin
		VAR_INPUT
			name 	: ^CHAR;			//! <Variable Comment="The name of the structure which started to get decoded with that callback." Name="CB_StructFieldsBegin.name"/>
			dataTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The data type ID of the current structure." Name="CB_StructFieldsBegin.dataTypeId"/>
			encTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The default binary encoder ID of the current structure." Name="CB_StructFieldsBegin.encTypeId"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="The return values is not used." Name="CB_StructFieldsBegin.retval"/>
		END_VAR;
				//! <Function Comment="During the decoding process of a structure, every single field inside the structure causes a callback. The data shall be copied by the user if required after the callback unless it is taken from CB_StructComplete where the complete structure is passed." Name="CB_StructFieldComplete"/>
	FUNCTION VIRTUAL GLOBAL CB_StructFieldComplete
		VAR_INPUT
			name 	: ^CHAR;			//! <Variable Comment="The name of the field which was just decoded." Name="CB_StructFieldComplete.name"/>
			dataTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The data type ID of the current structure." Name="CB_StructFieldComplete.dataTypeId"/>
			encTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The default binary encoder ID of the current structure." Name="CB_StructFieldComplete.encTypeId"/>
			value 	: ^OPC_UA::tOpcUa_Variant;
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="The return values is not used." Name="CB_StructFieldComplete.retval"/>
		END_VAR;
				//! <Function Comment="This callback signals that the current struct was completely decoded. This means, that after this callback, there is no more field coming, belonging to this structure." Name="CB_StructFieldsCompleted"/>
	FUNCTION VIRTUAL GLOBAL CB_StructFieldsCompleted
		VAR_INPUT
			name 	: ^CHAR;			//! <Variable Comment="The name of the structure which ended to get decoded with that callback. " Name="CB_StructFieldsCompleted.name"/>
			dataTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The data type ID of the current structure." Name="CB_StructFieldsCompleted.dataTypeId"/>
			encTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The default binary encoder ID of the current structure." Name="CB_StructFieldsCompleted.encTypeId"/>
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="The return values is not used." Name="CB_StructFieldsCompleted.retval"/>
		END_VAR;
				//! <Function Comment="With this callback the complete struct is passed after it was fully decoded. The data shall be copied by the user if required after the callback." Name="CB_StructComplete"/>
	FUNCTION VIRTUAL GLOBAL CB_StructComplete
		VAR_INPUT
			name 	: ^CHAR;			//! <Variable Comment="The name of the structure which was decoded and passed with this callback." Name="CB_StructComplete.name"/>
			dataTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The data type ID of the current structure." Name="CB_StructComplete.dataTypeId"/>
			encTypeId 	: ^OPCUA_NodeId;			//! <Variable Comment="The default binary encoder ID of the current structure." Name="CB_StructComplete.encTypeId"/>
			value 	: ^void;
		END_VAR
		VAR_OUTPUT
			retval 	: DINT;			//! <Variable Comment="The return values is not used." Name="CB_StructComplete.retval"/>
		END_VAR;
				//! <Function Comment="If the dedicated memory is activated, this function can be used to allocate memory from there. The behaviour is exactly the same as for stdlib malloc but allocates the memory not directly but within the dedicated memory." Name="BubbleMalloc"/>
	FUNCTION VIRTUAL GLOBAL BubbleMalloc
		VAR_INPUT
			size 	: UDINT;			//! <Variable Comment="The size of the memory block in bytes which shall be allocated in the dedicated memory area. The size is not allowed to be 0." Name="BubbleMalloc.size"/>
		END_VAR
		VAR_OUTPUT
			ptr 	: _PVOIDL;			//! <Variable Comment="The pointer to the allocated memory in the dedicated memory area. In case the given size of the memory block cannot be allocated, this function returns a NIL pointer." Name="BubbleMalloc.ptr"/>
		END_VAR;
				//! <Function Comment="Frees memory which was allocated from the dedicated memory. In case the pointer points to memory outside the dedicated memory, the behaviour is undefined." Name="BubbleFree"/>
	FUNCTION VIRTUAL GLOBAL BubbleFree
		VAR_INPUT
			ptr 	: _PVOIDL;			//! <Variable Comment="Pointer to the memory inside the dedicated memory area. In case the pointer points to memory elsewhere, the behaviour is undefined." Name="BubbleFree.ptr"/>
		END_VAR;
				//! <Function Comment="If the dedicated memory is activated, this function can be used to reallocate memory from there. The behaviour is exactly the same as for stdlib realloc but allocates the memory not directly but within the dedicated memory." Name="BubbleRealloc"/>
	FUNCTION VIRTUAL GLOBAL BubbleRealloc
		VAR_INPUT
			ptr 	: _PVOIDL;			//! <Variable Comment="The pointer of the memory which shall be reallocated. The pointer shall point to memory inside the dedicated area or otherwise the behavior is undefined.&#13;&#10;A new (but might be the same) pointer is returned in case the memory with the given size could have been allocated. Otherwise the function return NIL." Name="BubbleRealloc.ptr"/>
			size 	: UDINT;			//! <Variable Comment="The size of the memory block in bytes which shall be allocated in the dedicated memory area. The size is not allowed to be 0." Name="BubbleRealloc.size"/>
		END_VAR
		VAR_OUTPUT
			newPtr 	: _PVOIDL;			//! <Variable Comment="Returns the new pointer to the reallocated memory. The pointer might be the same as the passed one. In case the requested memory cannot be allocated, the function returns a NIL pointer." Name="BubbleRealloc.newPtr"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd OPC_UA


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB OPC_UA_Base::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_OPC_UA_BASE
2$UINT, 0$UINT, (SIZEOF(::OPC_UA_Base))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(620072751), "OPC_UA_Base", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::OPC_UA_Base.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::OPC_UA_Base.OPC_UA.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1602850968), "OPC_UA", TO_UDINT(1602850968), "OPC_UA", 7$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_OPC_UA_Base 40

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_OPC_UA_Base] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION OPC_UA_Base::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_OPC_UA_Base, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #OPC_UA_Thread();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #FunctStart();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #FunctRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #FunctEnd();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #FunctSetUp();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #SetPara();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #InitProvider();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #RegisterProvider();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #ProviderRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #CurrentExternalServerStatus();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #RegisterTypes();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #CurrentStateMachineStatus();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #RemoteReadStatistic();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #RemoteWriteStatistic();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #RemoteReadError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #RemoteWriteError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #InitRemoteServerDescription();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #CB_HistoryRead();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[19]		:= #CB_TranslateBrowsePathsToNodeIds();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[20]		:= #CB_CreateSubscription();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[21]		:= #CB_ModifySubscription();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[22]		:= #CB_CreateMonitoredItems();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[23]		:= #CB_DeleteSubscriptions();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[24]		:= #CB_CallMethods();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[25]		:= #CB_Publish();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[26]		:= #CB_ReadNodes();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[27]		:= #CB_BrowseNodes();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[28]		:= #CB_PublishStatusChange();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[29]		:= #CB_PublishKeepAlive();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[30]		:= #CB_PublishMissingSequenceNumber();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[31]		:= #CB_PublishDataChange();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[32]		:= #CB_PublishEvents();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[33]		:= #CB_StructFieldsBegin();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[34]		:= #CB_StructFieldComplete();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[35]		:= #CB_StructFieldsCompleted();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[36]		:= #CB_StructComplete();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[37]		:= #BubbleMalloc();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[38]		:= #BubbleFree();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[39]		:= #BubbleRealloc();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= OPC_UA_Base();

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
62566454F342212FF2412A957A14F995ADF1D85646A79FD837E5728427987C73C5DC2B626CB2F5A75E6C307EE0A4AB4A3850E2AC8540B4611C40D5C3AA2FAA22CD13B3A98C197BF2791F2F179B22C40DFB0F9893490DF0651E5DAD6B2B4F932AA4102627
D1818102A9EA05CB4E3D3E11A47A7D5887A3A9125F81EA38FA32BACEC05678636C1F01B63708AE79799DEDA6AFEE2F1B78B0E456587ED5B2B67DBC74E46D2A47FCB6D1FE0CDBCD3ED3DBB9895DDAA61AE27457778D29B96CC45CA5E93F941ADA88949BE6
FCAF6BBCA45C18BACFDB1163649BEEF297B0E607BFAB9CAA67909B665E362087459FDA71DC633EB40616F0C823BD00051010FCD55F509869E22AC62A6D8DD3F149718B6EA3CB7A23B3DEECFD854EB80D5821E67FB07A1C3B114327853B9AC106AFC4A306
12C932DFDFAA67184A5B9145040CDE0C9080C1A02142323BBF02C0F9B7A93EE1E742FAA8A63D926413DCB7E53C884B695E887EFC233C1F8710619B5F768FDB330C63AD2C46B73CDE3D50DA6BFB8365532403E30E10F8DE01C30591199BB788B05B974590
F9F938D59A12F145E4BE0521F8B5091A9101325C113F5531BE5D2907DA655052D6B6654695D2148D27CC9060562DAB2BD4ACE0BD7488D8E0F5DBA97FF2FD749AA582DB535FF04B64F27A2EA217CFE0C2EAF2837821340450BA2B06F179CC047512E7E66D
215DF4935E1344A3F499ECF517CEDB07C9D400FFBE1D5AB2F3F34DC9276ED8B88979AF7F310C417342994F9F20C256E16406EEF572F6F2224B76CB5303ED85F509B39969D44F1D2C10C7758E0DFCA5729BEB97667579B2A140C68FE28633AEC1263013CF
51CC27C08B4A8E17561806FFF6A7FDA48E2FAF712761A1FFCB0818E7931D908355A58D5F1F1AD0B8D048DA2689917E0C2B3C0DCE9DB91E4A853C6A2EC3EAE1C5EA19ACFA783133CE03CD040E7D6C52AE2FE6527B44B6ADEBDECA509BFD0763942D6409EC
F6C5D25ADB26FF2866FCD1E7615B10CA435B576CE2A0F477AA945120CE11C63C48F92520FC6A1E172EED72EFDE651A59820FD4681A4DF29F54C869F2D2B4B9E56900781CD7DCCA12FD3EDDAE48E7D426062FF0A3B3C9E753EAACADE4272A99B3A851C939
A766050F5E1B73D44EEFB91B3E185E8D1EBB1B8EC18D480E464A5CA1DFA6880FB4B9F4A073F1500BF4E3A25F19621CA31A237DED30DE3BAE1596BB17EACC95D7F7A57139C5E61093A2494F779BC7766860055361F65E8F83EEABADDE99A33ACB35A2C8C2
5B59A6375AFA33550D0C0617AC1EC112E5CFBE511A446C51AA0C7003921DC90DAB858F4B4837D83111A7DC6A46BBB537C90C228D1610703C250A41392B48895739BDBB4B8FED82EDF9D00148C00974AC40994DAE6DA9419200650432A7155096F1799844
465CF665C6E05E1A51799C044AB4A08752BEDDD0FC9DD3006DCD78417F40B966FDB46657F698BF6393B738D4806932D75FBFE845DC5C4D29FB8559138976A08CBC7264839D817558621A5A434367BC4958F468DFC21BCDDCF59AAF06DB30AAA6223F3879
A77F1E78B1D8AE46F2E9DD9B8734A68D0355156A0B666825B9CB82C90788323B082D1C4F543976E12B6A8C506FF4857FC5D0A35740B7B89FC14471831223D492444FAF0BBD98CCCD18AA8FB4D6333B5A75F98B603113D14748F243E614F0BE65D97629EF
C8DDD08C93F6CE983FA7BF1E31419E1984597AAC5237E192A37E0518B297387B3BB5D7538D8C64CBEF3CE1C435700B377F4E47F22780CD0CC2D4015811A12B56CFB2E88B8DD76E56A34F1BD90BF00CA7FF1424148DC9B45D002943DE10E3DEE00572E420
BBBE568EBECA0B8C7FEA575ED3572D0B2B8BBC45EE5AA8736D8B68EA57C6979F5F562F46A53E30F4A42ADBD28E8DA31E20416233B11459D64E9EB0CE774E4882B5FB3FC501ED5E519041EB4D5563AC957A533363DFDF0B25FD0375987319B3B3217E7A43
52D691DE8BEF7D009ADAE5FF8CFDD7AD00AAF3542D7EEC55F41ABA31FFB29F767D2EF14A1D605C226874E4FD1EBB7B18B35124B0C3AEF2D9EA48D25C5B7A5A3D3A13B673341A425A40E2B01718ED6A99233D7E16C61E556198770929AE7BDE570611F393
037B0EB52B54E08DF650FDB9C94F7BDE0864A3B3E6328D6A4B91374B39302BA4632DC8C18692F1AEEA4F04EF3B89768B33F42D84E2CE29FE1C6286DE97296215010AB6298DBCE3F73D6314DA2F348C496EC2BF8E7DEE87E7269278746D42BBDE2F3997DE
8AC531C0888F00F73398F620F39F2790AB6408B6B08846AFDC4B7AA67478B42E5C2CC6D8B774F9D0FDD9BFE2B14BD8452C30E9A7EEACFB7A965A7E5737DCB18ECA287D3A995D79F1D01798300D5A27BFF1788C6DAC5359EF72A024FEBEA970E49F691D81
F322F1A93E1C05D50358FD42E5C65FB00F6FFAE10B863409E6D5122CA5B8BAB571AA6B43F4EDAE432088112931E1ED4F10346929687E22980ECD99346C280F453E6544FA30677262E7570A0E786581789C91E9E35F139CB90AE81BFD94894ED72346CCA1
EAF5DB6FBA522BD9E5E89394FE19F935694276BA01D778D6880E38F7DC28E4B5888B9063488B54FFA2AFCA523703DBD684415A923C29AAAD27CD586E94C978CA1703CCA3BF147B80472CB135EA767AE00C270C7B083A170A4C979D2589D1B872682403B1
2FE47639BCBE94C5C9894F5C9AA49C976DDB054388BC20603B60A6C498F41017E8820C61190EB1D3D9D26D7ED57AC024C3C6E4AEA36E0ACB7D25BAB502D2982D2D0873DEF47EF0EC9FF368F07D26E2D539B80E8D5401D14096FC7FA4958D4FD9645A9787
0150A818D77AE3C130D1D38103EBE8B644A951FF81629F2FEE4D29083913171AF5966A5B435F3DB0A9BC8A313EBB1301A869C1D469471D9F241448FCFECF4BDA300A9D7AD26FACAEAF2192FEB6A6876B9EFE9A238B36D17139C5D9FCADD15E5BAD31A4CF
1D256F41299A6F7CE16297B105FE219399E9CFE9DEE18A6936FCDB8768E62B7E09F497B4BF383B80380246D2A2027F62659E08BE8D468A5043D34AAFDEDC15B142FD318237312ECB35B72E249E880D5BBE8930311638CA4AD5C3E8CD4F3F89340F7FEA4A
79876A62687FFCD1F9AF1C30F4D85C0F9B8846AA29731D6286F55B168C369394215ACED676416900F532227EFCB96E66D7545861BBFF23A33353153E259C9168B2B758FACE714A94AEC5DCB5A9B97F7B01CB72DBBE0527CFDC24D4FC5F6A204D916833E6
E8DE05BFCF0A287D1B675D3B8C600CE60FCEB51458D162B50E8EA44F38F11B9DA6F0C814511DA16D891B3644EAFA4975601ACC173DD6F7E3B56BF10516BA870EC761E3E762080B52E3A4534ECB95203BBA7F7C7CBDE372689DCA976179F63904A0E948CA
8500AFBDB3855853172C51628220F4AD7E953273EB3DB9B6A2F1E64965EB5CECFA13849C083E44A2D638BFF6E69B6737621636676349B685834BC74631BC8CBADF1071C81D98255AE877C9D36819A99EBFC71346C4E6F47C0F5529E7B459886552436BF5
3A786BB5F26B342A8C14CC28088331BA8EB2D711D7C538A60BD5BF72D80D06AD6132161F8A0549E2CCF45E943D9911147DAF3412374E17FA0A9E0D31F8893ECD6D485FD5B22A537695F883765AECA0B46CB1F792B5D7C607A6455F808104048A353CC922
CCC38B1870891E00A106D67FD5A448BD542081F7E057825069E67AC345D279768B5B25E3B5A0941673AA5CCA31D6ED611602377E3CD11C6B40A67C2FF40FF05FFAB8AF573193C6D12F3131C9B78927106D28355838256A994EFAF02DE462A6712AB28CC0
026D6AC39842813210DC99D2D9012C79317F24419471B8508E511909FD7F629FA59D84AEAE9A27745F48924D8BC2DA2A24F770495FC4726073AA9D5F82E23C3077E9F537E4789F073B01004894E7E1AE666F6A11CEB990568305A133E18DDE4C9E0EE8C1
C2F3C137719D0A47DCD743967ECA557A975150AAAA2A168DDA83E22BB88DEEEBB0FE950206DB5AB07AAAC79700D49C4EF749EB46D8B49B754BC87254BCBB4C5E2C07A291C6791741AD3D4E215BE77A1DDADCF65F4A3C34313AD382D239E0E07BEBB08B7C
1489946B99E71DFF58A9F013A7133457A3E8253040F5B8B0833E7C7BB2779D61E4CE3F6A66DD1BC55FFFC5C80C471B57869A0C520A13326B87559B5D65013FAD3A8CAE06A9B96779F40A67A0C49740F034C176F0F0A6CE1AE6ECD715CE9DA78B66E13960
EAB76E237A8AF9C46FDF76B286AF375BA7B1D2ACFC80F51CE4A802CBDE3252330C72BC2315F34914D622135C4CB98C106E01DB4FFFAA22039B135EC19D3F9FF9C7192ECDA135D3CF453A7B2100F13E1E83FF6394E2C5A4FCAF7B19EC98AE9A4A6E26FF69
314A05F5C8A0DF103985573FB47FD7D5FA9B247B62A9ECEEBC0B6D340D2944A900BB7C739C975742B8EA0E94DE59432D913E3FBCBEEC5EE0A7D3955B97CDC8593A05DDB00D984663BFDBA75F7B099E10104371DEBB8683B129426758F3F6BC9BF56CE958
833AC550CB18F806C62011EAD7DFD48D032EDA2C9C09E44DC4B8F05A21A46E5FF45730913DB2C79083BF82B4D5257CE0C1F047DCCFEE8A64748986D3E63BE86E48BC5C96A8D84AC8BD3524BE5E04DB0176296ECF27D42AC3B2BA38FB9028143EE6DF35E8
D2A12794D51392D4D8F65D00D8B26144E93E53EEA1861731F88078E12C81AF9127AED3F9C377A75A8AB5FCF6FA75BF516332ACFEC8FEBA27C4A7676D85C0BE751A4EDA2128E74B5E48AC554B685D6A97F5CE6EEBE981FB0E6FD4FAC4351385F8ECEB981D
327DB70FAFD16ED4D5227D7E44706E7D61D4521D1D818C4FAC9F8FF43D2C163C10D21D285FFF15E7370091340E4FE3E92382CCE75EA7F48A204A7E2930EA39852D34A8C56BA85F9BD93F25FA16F35ABA7AFAADD74297828A2CC7DCB0A027A2D0CD386CEA
A14F37A70C665D1691F818005B31BD134A74CBB19DCEE18313BD93E22F4C69A67166F91861BE75D37A1431ACB7D82FFC0BC80528D624E5D0C651F9A048959ACCEB8F94B7C401C581651EA49A33A250ABAE06FBB871670872690AF1DE43E3E8F71F589B92
F71CA2608C82A84A50FE1D4418AFE2A5DD9A163E18CC44340C44A2F118A04EDFF7A72F80B2A4B331C791878F9142F000B0AC1070318C274D06AF49D47653BB61BDC1E10FA1B8BA6077F518DC2252DA70D2D79B7DA7F48894D9F55E4317796471957482FE
CFAFE3F38D7A1E87EAFC41CF80CDC553DE74EA4A7129F46AE56CAE3F61AAEC99087B0912A077CA9D75851D878C8F8DCB8C34978D0F02A0B825E0F4CCD4CD860F2C3340EF572075C431A32ADF1E7419869CF7AE8C9F7C29246E3F27D05FD9DF2C693444DC
9983AA823554EFAD42B03D6DF37CA4E6C71F6F62FADE380BBDFAD8B3E9CD4C1B6E38B84E710CE263EECEEB4E83A2798651A0A498BF5E9102441E366F3CB22CF5B81761D041000AE8E567CBBC5002EE647298C22CDA96B0326B7DF9D2E049679815112F26
8F76F3B34EDAA12E121B0868BCD76F0BE3548EDE1E1BB544E715BF5C8DC1A513713B83B6BCF0C0764CEED2C272E499DC16AFD3FC78E2AA1A712B390355EBE9B7F989DFE1FFD3C448C1519FB57FE2AC4FBBC6B9F2E3F0A94C6A1D8524B29BE6D039F0CA52
6BD5E5F3E80FF9816620C58D0E9D2B7C95EC666D2071432F2073E87DC8FB2E29F1F07187CC0315E04C1364678860870443AA7F097FDF8B017BF7D0B89D5C45EB2131C96F9106891E2CC1768C4A30E4FA493061D1C7A0A3E621030E57A8DA9035A296F71F
2FD15165A1DC9742BCA467837242846E3C092BEB69DE782B0BFF9B32106B14483E65AEB86EFF25BC0921CDBAC930147D3FEBC80E264A89282E0AD5F1BA5AE7B9F027A8C486E26A1B1B40EE01E35DB80515F3BFDD73B2D99C8A049E83D0C3A0D2161C9563
0DBD6A512F80991AFE3D16467F404BB97CB35D8B05B09558BF867F97E1A8249A2BC6CCEEEE474AB4F4CF68CA56901F1D8A3BCC2A3D92CF12E3631EC22F2DABE0539770811631A022D00DDDC9547C50AD08F447AB150C79EE4278307A77A8C14FBB948CED
EEAB9809CE07F6B4CB2912E2C58C8C4E1E5BBE723D6ED6CCE24B1BB24580FD6FDED8964B22FDD8FE0B9AB44EFDE68E8228E58C1CA6230EC2A328AA3EAA8BAC9D40ADF524D465FB10901D474F8CCB93EAA52D518CB6192C43B65C1410A3D24244B6066E66
AF589DBB7FF55E01A112248DA7EE21F4A2061655C7760EF7435EA89021645626B0757A5E9BF0C271D38B44A0E03F8364E0E03083D1C004E6845C5FF8412CC7BA24084A601362D6E5C80816B0A608BC5965AD3B41F01157076607A1CB11E05FAD6671E6A9
B31ADF808172FDFA0742A80AFC3702328256DB52B6B2A0F279671DB1C85A9A5FE8579233A2C8FA288C9B5D879EB3DEFF8D0CDC08AE085E029393F84127A96497BEF68FBFE9455A324D1522A032934EB47D33492AE2CC5D70C279A23B2619C8CD5FD77D75
891050DA3A941BECA902696D1F9C93BE457766EBF7B960AB1F974613153E73083319ABE0CDB0938C184CBB0879C591FC767002467885F33BD844D3B97A19FB449653FEC5436C021AA8F4C5CD9FB0E1A76D3A0B04BB1528C69AF44B0A8835FDAD33F8BF21
77E55FAD63E6EC50A493114A0EE3D041E6A49C2DB114084536D84D04125ADA78AA15596B4B89BC7B85ABCBDECACA1108BA094E0293D69B94A1D467FD498F16BF027674EC954C2D08A88D9611990BB740AF7A4DB54FB1E07454649CE6DF2BCAEC661453E5
947FD1C72D6008EFF79C10AA7F36DE1680300484E23790DAADF327EDE287C8BF6CAACC271EFF409A5A4F8B5EF659D095D5C76309BBD59A60168CFBF922EB5C2BB18321FC1527DA8230AF7D927630202D176530FA72ABC83AC3FC37DE16E67A7B6B5E5635
2211276353FEB38D5D9577179ED6FE0DDB00C561C306A1B157EE2F6757817F15DC467589A9E5BB471BF29FD5A281FDC05A0566F7A5C4DDEE140069369D769B5E54D23869FD0FA51FB07D51F2EAAF379C033B0B36262C8945CAE948B58BF30EDCA829E9BD
6924280A76E61166F636BF3D8C81AAFA10A90A21154E5DF962177CC96A028EEB0900A4EF8A936ABE256C33D6B2285F96DDAFF9732B8B2FBA9FBDC79FB7FF8360E926FB1CA32A1F7F245F9ADEED1849AD1190CD428BA08077B35182B25BA3F8FB5356A522
1F46C0E9F0E5846BEF2C09F612F747C78243D88FD13A02CE4BB2FA1C8E3F048B7D356CE33F7B32CD2528FF5C7EBCE2AB471288F9D0803DC025269124F09A3FDE579C4F28AD58089D949C45466FE30E7F0DA2B81A96B738CF523F89893A691F81C2026A30
C3FFCD8BDE8600B8790CF097B79F1F473AAF77DF698FFCF5DD0EA37F29E8241397C7326C0BE62DB280DF040D377CA6113B0B07C56210CDFE90CF3DC21BE8913E855F84AD072E80BBAD68384AB8A08CD120423B7120EF95CC1463741A86DF9300ED4CAF01
A668BC9C5ACCF2E02FA3D80DD41E776F2D52995DFD4CE3EDCCF143D4F2DE89E0C25292CC0A70063D477030D4D238F51ECCA27AB0F6B18EE55A60352FB863A1352DA429E39ECB0A47BF263F9F9336E39ED13459ADF739C3C0E7E7A54F46B00581701D4845
CD12B2350557519B3DBF64BDC86637309ABB1B6B1C643594EF7A8DB7776DF6B6256B2F95A52120717290D68C1F1BE2D220A59A66E331F8288683BFFDAE2934CE156F7E52FF9F0C275A32533591BF8785B48F1214717F3D6385CA9662DA3D8489B8F1F5D7
A4ED68B0BEDFF33E4F937730DD1C1DB64DBA753F2C9A1651C72B6C508FEA520D2E7D2A2BD56E056E134837130C2BA130B9B17C5656B960265F1CCB056235AA4D37626D00D0440D3ECE2FD48BD257959E7774DE406F7EB116B40F4ED885DEA20ACAE024EC
C60E8F5AA84D980C7B0CEC5A1A24D96C7A5E99555D6D19311666D22F89CA2DC79B65F88551EB6FE98B5106530AE31582FB8CF5E1BE573DC8BC38BB7CD4A5FE961FA87CCE0FB0A10A5465CE43158366C5CDF38DCE99B805EFA14DE733079C3A388CA7D3C1
4A0C323B55B9B07070D44E12797C7A26142EEB114D04E672B028EAA4E507B039E3470FFE25CD7C302352BB15C62775FED30FC27A42F8316EAB72D7B74A317CF15111D8A5FB029D961860E9ED074C7D28ABA53171D74CBD869C1720236B37494A160D29B9
30280830D8B06326330106A7EDB76AAA1DF04F3D9983A1B3E57FA2D11C3AF1D5AEC6EA85EFA00361AD034447A5E19E6A078F3FE63EDBC335B71661073CF5B0384DCFCB2E177E0687A40446CB5FEA8E04A13CCD41B197E082984EC72E7AFAB08A4B34718D
04EB6CD3C82196F75DA97D7D93D501129DFCC037E4720A17810FF76C1F4575F0C95E614782C70EA5D9D71BFBA4F127BE2F38F2DD003B2DE24767AF6B9B6F6F2BAD7CA7B63EFC6640D823875685C8ABF61C4AB875308E87E77FC50523B62518B7BD9A266F
B79C1BE4ACC12E552A3911517FE21185B4EDED138906F509830643DE65CF5BE0A725E9DD9CFD6DC35C91C62DF7BA613BDB43E7763AE174AF6C2C06E7959D49A627F8541F4182CC0B60319252F799440DE326A2F46A172F5C2BB352641DA4422A6E0D1F99
BF85DE549950CE75F88D013BA67B8928645D55A756D3391111AE0ACA36FFFBC1DCA506D2EA31D330F4B937CDB667E92AA17D80FB51E8C156951F284D898FE6BC6E6C71856543BB4F2DFA7099CDB594868E306DEFCD4753179296AAE2318640F9D47D7F75
7955574BA17CDBC817FF25F977DC8FDCFCD13C486D6BF22F8C8DA82E4734CF3B815B0764FB625D3EE58BAF080D88E19464F15D48465BC4BFB7C2D0942654E35EB84DA203E08FB07CEF3F14D0C18C7931597479D81D1B9E0F167F8BC61CBE0C6BC0EBC358
2B78E2AC185452C0107AA9EEDF9F2ACAE3A46C346DE130E73161FEF244BFDB07064F6A6B83424A1587AAD456EADA6A9A2461A504310BEF43CE08E959E1AF6BD2F8B8F74079103BC423AEBB01C135641AA520AFF45888ECAC80DB88BA812C6B21E0C275A2
83F9D47198BC92997A1933C2B1D6B18648ACE66D63A5C03F029CA994B2327F93EAD8379178EA8BA7347813B6508576F1BB5B235EA6192F12FB70B0CBFD69EA0AFAF928D03710352037FB98CFA73D530C386330E55248FA2CBE03CC83491B89FFDAA5717E
6177887BA061B794D512BB0519F8C925DBC57AADCE9A2EFF8C91B11E3BCBA4683C66CFA49DD6169B36B8A22F035E9AE26F9A8158803C2B7F1110B438F4BF38287D3D1BBF85A1A00B362A2D57C172934259E2BDAE9C3D8758073173B16BDEC7F0628E0AE4
3F38288BA27ADE1814B16B3738C60F1AD081236EA28FEBD426E6ACC3EC19B6A53F0B15A425935F4BF0511FFC507947A1AEE49594D2271B8CD820D3EA270AB16D1D6467EC81E85AF082EBA6FE3E0CAEE7651641F3DA35D5A5DC319374C45983D589763C82
DDB9B1F594E00A3ECF1D742027831A10FAA5E74DAACD26DCC45D2BFC27DF7B8885C25F511A8E8287474923B217541970E31823823ADA68260F10F79784DF87C0B3F05BDB88D96779257153DE4492F69FEF5507D0DF002DEB25C9EA02E42A1FD3056A6A67
7FF085FA92C2D4AB10FB642411504B25E0FE5B86CEB2C5815DE2260767322C1B57545DA14D22277D6044CA9CDB1C245D616B45675B0948E2FB08868025C2D30BFB27263636C66B0BAE83529B2C117C07E090925CEC2F1419F91950236A520C9DEB25D06D
E022D5E063243F9718C87BA9757AACF497ED7D8B06304C82AA2530D565F41FCA307CB03DF1D071855E6EB2D7E719AC0BD359A1B17170CE1A4E63CBBD2913E9E3965A41405315ED774F2F1A6A2B7ACA93BB4D57BD25E92E72E0BE7B3072ABF4DE245889B7
A84D6C08D23440184F772A4450F1BBCC09FFD8B6C2C5BD7E1E299E293579ED3168F3549D5FDC6D5ABDDC14FE38ECB92BC50C3B33C027B55844D8A54E0309B27F89C7A2734F7785025339678F81B95DAF015BC194AB969F70BB4C5D50485428FA652C7B70
A3F01DD2407C3499194FA80148DDDCBBF3522ED91139422D8018AC8DE5ECB972F3F45D181A2C9103268695F25F1265A3DAA46451F7D57C4C537E24A64A1F227F39E658210AAB158298F19319DCE8681C483836FC8C2870A1D66C3B501594C0B93A335663
5578A529C5A5194BCC6FF98C594A45E49163780A01AD18982A4E6636875B4008597D81CF2F253354A2342CF4F450774C61B90DD7A53C3581D24C78F5891A296688A641B57527D00F93EC8ED344A1B8FAA1A3255CA3E6372859A7D8ED285892A832C4F7BB
B2BE94AE5E2FF0002B13952F102A7B61E0C5B8E41D0EEEE0D4E896F53EC3DBDD8325596A4D6B8342A415992C6246348029257F3244C061993BD8F5D8881688C275F60DC3B48CFDF3466535784FF6796C7E116329F48230733BC404268ED2720A28B05A15
FBBB85F7C42E6D3EC1CCEA0AA7BAC1FF140C9015B8C7EA068A6D2C4933889AA4A7C23ACAD28607C24CF554DB3AA1DF524A9D565B085873206FDD712B2B6E049A2F6B1AB2367B44944927B98EEAEBBAA047DDCB1BD56289788A69D0CD09D1F78795356759
AAE17BE05E92B29E10D116DD7979E88ACBA870681EE9A2EC223EF6FBD029170FF09AD4C56D59CA8EAE4C8CA771799E42A9BA3D310C9FE026B5D952DFEA166F72B8F688314F2E50D682C8760B6356F2705C17F894987A8B911646606DB25033A6FDAF6183
C221FF6C4BB41EDFCEAF089F46F0AD4C8023A71DC3DA9D6F98B4FF4269A27C2025CDDA9FF34802F0122B94DC6B498513D7B700FEC74A6D9E6F358D65695CC450CD49C8B239520A9B29680B2876E33A6D3691E3C07A250412DAE6A6A522BE217B34F54D02
F315690B24093D906012FB0E98A47EEAB0586A36AE1AA52A3637DE7947A8842F6A298905B4A8FCE3B5758857E48BA1EAFD20FD48DF34FA999E8B2E9F00C98FC98240B76301472C7EBAF1168750B0C8141D36D0C9A44C1EB7F38CA0BA7B6A94F3ED83101D
FBEF6420B92E1E7CB211D79B4DF616CE1E70F7932988C455ADBF38CDED6CB07372A34C533CBB53BC16F61F1B5DE56A7B1F0F978452743C4F042A77769278341A8CD7B9F5BD63949C6AEA34C08E4A560BCD0C6F67C1CBE4BB98B957B3A85B83DD24F2340D
7B5A0A69172E540AF2407237D9423B0B361F2D818FB00461F8E975A7BC52530960CA6278AE336A35717D33A0521645F5229129B41D4493DDF19B108AFDAA2E77831FC1D18ADD4F359144FC8D2287FFCB81B92CC74F0A69573F6E5902221CA4009D4E9503
957167C6AEEC3FB25A522E8ED71E0479F61D46247CA5075FF7211A5CF6DF57BD46FC495F4CDBBF0A150DE2ECCAC33965F70B5957E0C2D1C2418EC15AFD9E6869A7175826CC0B284BC1CC99DA5D80BCBB5EB85613250FB8AC5FA8091DA7AD45944B300548
55BA464A17DD4812A2A18DFF8772CAE583098B83D6C3F6CE87BEB4B7E277BC51801BFC1B648B6D550D63C7BEC058476236B5C162C77EF8F3D233E52B50B61A7FD748B3EBB58FBC1E3D81A37CBBA4E6518B6C317516EB8F1503ED8D00479C85839C453399
C5B39903AA3FA872295C3E04E07C6AA588FEDCB3B217B55B344E458052B49955EFE94249DE5F66329257DB67D45B3060B746BDA57FDC889AADEB6855A15B7BDACB064A44B10566446CC5717D0ABD1510247F0C5A5AE7DF95C4CB84ABE7CCBDF1B128DC7F
A897EFB12262C6B6901AE895490042340D948DBE2E2B4F2D25939D6FC3867C0F6A14F8CA3F30368EDE7DF792DF3A2412A81D707A7548BF878EDAA4E942157E754A84A013A3328FBE819D99892477E8245675C51282A745510DD5FBB7FAB7CF63261BEE5C
41CBC64370A00C67A1BEFE7559C5CC0DD20BDA52EB3930FB798272925C66DBD430D7FC401F9F4E12792EE322EE17D1E00549A027B6F123B13BB84E60E122EE6197B65C36698B8786EF3B897C3385A125F5074C950002B5D73600F834D5E60648151C5BBE
0C43D73F8A6921EF5074476ED233D97C75AF71ADA26651F08459D0B6701DE84E827795B496EF1490742D296911BD12CC0E2E4BA43C7C7B484A98740867BA822F794E98A578980CBA76976660F7EC8D48C5F14E3672B864B6DCCFE9328FF46B7F2D7166B6
FD90F701EEDFB42121E0150832E1ADF49FE0FC01B68B0A0E7128E02B12F0D7B775493380BAA628D2DA84D20A3E667B4F0579BDD759FF18DF03165C8BDA6638CF2C7FF96BC2F24D702B527E5FF5B1AC700297266D29F1A60C30D63E4533EADB647357E631
D8BBE8A422550834EEEB8DFC096A4A3B14EA074592ABA9BAB59799E224253746A43D0AF2E839E6923B178AD500AEE53DCFEB47BF797D4A52539341571AD133D17C0FD09BE43410C22F8118A61BD012B420F07BC418E1B836A4812097334AA93F3F0FE6CC
31C1FE4823BE50ECABAF7CCE59243DCD8005507F5260413E0486CCCA08420CC7AEEFB6D437598CC37A018285F45599D310A268A42336AF670FC4335CB9413355F39C8EA7035581AA4837590E143BF07EEB7ABB42840A8F2237ACA56498D56E85C7DDE6DC
0DF55D2237D1374B405E1EB8EFEAE4955A5C1EC705AEDEF688ABF8D3ABE3F7BD779DAA67AB3C1AE225BB91D35AF500D4D750F17BA363E2C2622E610EB78CAFC629DA7F0CDF2A8CBF660B0298D1B79B31CACB410A78A473ADB2DF8EF34F1CEB3C5C028A1E
8874B2DA68BF734C693B656C0E66BBB1547931B0B1EC0DA035253D81FE5735D9D8F7BC28F3FEE621C8A5E554B4FF67E779739AE17DB420761E987E7C91A3A44569EBBA39AEF64E227DCF62A43D36E0F8E234649C60B6C9D2DD09CDF1E4BB748BF5525B58
212E53051D5D540B34F3468A6C86B7EEA2B68557FCA6C8440BDF80A7F2C9A5D2427FC08CF6A286901F65C7599AD1322CC58FDC532998FBE30323F9E927B136BE3AC7EF960D786A895E99C8AF2E8ACD1C764004C6EB1383477BB044ACE0A676A7BD4392BD
9695A288147DF7E13CB20BE350BB2380FEC74984AB3960669B1CFE61F412B9DD36914ED17B7A12E4BBFB627EFB2B78BEAC2D6A3649734E446C31418A819268C1CA1E9D56094B5829C6DB4F1C67BC53E910E9822D8B1166A001D4F70AB0CA015D71F13362
EBDD63CE65225F0D12370AA770C2E8728ABD3571C2D9189E234B29F09F6542B42DCA2E0C48B7AEF36C44DEF222F4031B1F199433C7C9BC4B60753415B720F6672E36342606259A5C022A227E91A838FB94F1EA22DD69042E5C9E7E0DA9F02983BEFED91D
21A62E0C99B3CEA4656D645598FA202D5C236AB0D6D24102BA77C63E4DC5497330B75EC01FBABE3141FC734157B59BAFB3148DB85C661055A6C7633A93DDD6F9324F82C5B363EA54AA018D3EEC45EA6892B414D8FC6CF8835B24D4F095A06BB6803CD985
731471131A9A7BB202003F8A9D8D671F25E7F4D92EAAD3BCB2B2583A2AC4E1EC288A80241E77E6BDB755B019D5FD65FD75FE78466156D21BBFB5147DBB688029C499454A4E9627BB642D4BEA386A3EC6062746CD88F23DCFA36AAD817BCD1139934749EE
695B8AEDC8AC59E8163B2C56B230BC8AAAA42F7BB285191A3D20771E715FBBA9DB5E606E33A88CC4CD446EB6E85461308DA2149B186DEBCF59CF61642582B26CC770A9FC600AFD5850EF1A458F1E00A78ED36FB0A45A0BEA5EBD18A0179672C28E79DD5B
4243EC2D2966BA3A13996FCAEEC7FC6E94D9B59FDC510856E1BAB8B8D859B778E91F10F503A9ADEDE751B298DFF0840AFA61F8CB4336CF7168B8148CF92CB53013929A47635349773AD1C85B548D3DF3FBF1EF3C716AA03CEC2E30694E5A42BAE2714CD9
5656B1CC0DA9E8529FE20DB52E3DD5267B0C34B34BDBE90C2C37D4F72BF748400E8AA4A9BAD65AC349432A05768F5AC1EC1BE199F0CC222923375BF4FAD0A2DC8770EAA7C8761DCEA698913B717F4E81BBF3547A9F1F3B3A6F5F0C03B4058B74F3D2E0CA
AE8B6AEE545A782E0B71D6465BDD60DECEDF4B145595E119AAE0340CBF488BB056857B670F7B2B2FD980304FC38F71ED469F38E941A427852D75CA0AC73BDF2F2B1F8824124250E8FB8E3CE3139462A4721EAFBE69BF16D7CCA2BCA422BAA5BCC19146BA
34FC98273A3AC2FF7F61D4E95A7C976B4ED0D754380ACBA306C609CD3B246353458220678B8B68054674EB868DD939392E0536C725F27BB07280B9EEAFDB6AFB27F69FF10EF9AFDF0BDFA547C99FD86A9413BCA474A9567B62A1CDA04749BADFAB917F31
354D3BA961B27EAFF8E1D494DFE2F5974EF50B0F9EA714F05DFBD49767B62552958096820DAF5C9F8631BEFCBC5F93E6C6D1B7F5A6F2F0A7A7A0BF64551258A41C1872D22E18D387758FA0EB47075FAF4E94AF914D8D7C96B825FBE28E6252836FB7E27F
28237B0301E13E2556E8FFF25E1F2A3A9496AC03C85C419B5902E1BBE1F55D3D9E249DC6B03A4566DBB402499F0EB467DE6E43E234946980869AD22DB7FD4B215AFECB04BD47863E97213A6AC5931C22524330F3A084C28F07F7C67E8CB64BC910A5FBA6
D823D8BFAE2D30D7A1E4F6F954EC0AA1D84425F072E8010C138621402AB4EC2188866249E4049E9C0EFD43D35A412516E17FAAC6231BFE337770BC040921AAFA05FAAB66B7C6574140AD56F2C4B6B5B242810A5C64003DD2459752BA8A9D3CDE7E102BB8
F84696CE7DA9DD4407465229B8599BA0BF737E04ED222CEAEA58463F4BC36372A5CCF3A5F47B3B736F7A5E3797E00D61668420BF8DF98949415BF04F89781B34201E252E9FA394DFEC4854C461B910050224A8D7CC52EC382EB3083E7DE8FCF03B74ACE6
9D92909BE1EC382EDD1C2B020CE253334706300892A03E0B79BBBC6BC9F5F901EAE0AC651982422ABAA054DE8543DBBB5BCB4D92CAA86F2B90B0A2AC1DBEB83F3089D4C321811E2C29C9792CB6FB3747D1F0A53F915C4CED0BAB53296CA6CB26CC6B2C88
7594C746A1B89CC9E3E983440A9B31C31918F997C7392A7F413B17B3DE44E227E2D860374A6EC7C088AA6E06CDB8270EA625405864F99A49DDAD6DA27D70181E91E411BB2289670CE4E01803C4EA1B74FAAB3A494BD7DB972B029B09397DE1E1CC759B34
004185DF641E1D401FC2068629EBFAEC682ED5677DCE7B1F16D475512B6789D78E8DB637830D2C7D0C0045985B090B24B9CE4398568AF183B5422008F2D38ADF61DAC71EF05E7E2A61FFE7F0A68843C45AA20F46381CFEC296D449AC8F749A5875E2A535
213B21ED73E2263938A90FFB3A62B68726A8CF92F382DEBADF0B67114FE04F5F49A99A3232AC5DA63F86E7AD6D1A37B4246B6A66DF5CA32D5A72C59A13D5CA65313524EA2BC55A639587EA0C9F609B4EE3C48DE2B442BA094E4E50CDD3146993F971B5E0
CC1A4DD388EDBEC7185F41CD08DAFBDDDBB5B48BDF18FEB42E89EA1C0DE3168870677A48934FF9B8419E7E17D82B2D0AC20F6B2A36F0C2C5D1E47CCC3BE1CA8FD9B071971D114918BC9D8C669EDFBE84B2451CE86E00DE211F812340E67A0F400930695C
7F312D47F68EEB431DF70D303D9AEC3365B401D6B9D900683DF28B96D145788A788003C29FDFB0D36455E858A0BDC7CEDC69BE4823C239300A32D76D1AAE0B4BD94BA0E3530D4A29A3058C20B3680EFF6C59EBAFD60B061EA1EB6FAAC536D667A64A0502
77EB768425A96B91D92EF4C37EB2C0DED13C77C9688387332BEBCFBA38BFF1D97A40676C17C2C5BC45C1CFF66C27352BBD54F66EC69DB234A483D9E659F5ADD61B0EADD9D75B46FCE70D294FBDDE275AC9725DDB19A5888EA296ED7A50E8A2FDEA88C41A
68ECF4B5D6C17D56E619572DD0984D70E66A2645322E9F320932CFC30D71C06880B33553D839BAFCB6A69816326B852B84DA483B7F9D963258337884C0F13C90F6A8DAF5AC50850279621EE514005979CC38225980D70FC4E7CEE07345D61145A4135998
F0C853473F4488A1AA1CAA16B11B4953513CEBBE34F41DE2BC471EC760253509E7BD5876B4620F3C300F0CBF422EC7E1984821972FE64805A6E23394F4D2A8D448F5FFB95F52CD8BE3BD3ECE8B3C88331D73F491A38B1D6CC647B9AE56A478DA75A2F545
B3D4E04180AF9B3726CB5592333618FA9DB34E3CBC45478122DFFB70D6A9EE4215EEE67A13EF6736AF401DC94C4E9D87146657DB9CE121C0404D15949429CDF014F29CF66806F3D28CC5279AA4D4365F2314AAAB8867DCA41A38F4C9DA764FB6148955D6
8BFF02FEE34D30563908DB08A57D7204D5F7EB7A659F24A0EA95F727622DE6FCCC45557B