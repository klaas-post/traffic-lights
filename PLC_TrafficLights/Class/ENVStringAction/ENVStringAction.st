//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ENVStringAction"
	Revision           = "1.0"
	GUID               = "{2FDCBFA8-7F50-4A51-A4D4-A634F380DB99}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(342,120)"
	Comment            = "to get in action in case of &#13;&#10;an change of the string">
	<Channels>
		<Client Name="cAction" Required="false" Internal="false" Comment="Writes 1 in case of a change"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="hötant"/>
		<Dokumentation Revision="1.0" Date="2011-09-21" Author="hötant" Company="Sigmatek" Description="creation of class"/>
	</RevDoku>
	<Network Name="ENVStringAction">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{4D6BC4F7-A9A3-43FC-82E2-D900DB128B1F}"
				Class      = "String"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Data" Destination="_base.Data" Vertices="(706,210),(534,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using String

ENVStringAction : CLASS
: String
  //Servers:
  //Clients:
	cAction 	: CltCh_DINT;
  //Variables:
  //Functions:
				//! <Function Comment=" The function doesn&apos;t provide default functionality&#13;&#10; Please overwrite it for derived classes.&#13;&#10; Die Funktion stellt keine Standard-Implementierung dar. Sie muß für abgeleitete&#13;&#10; Klassen überschrieben werden.&#13;&#10;[&gt;udOff] Offset innerhalb des internen Datenpuffers, auf den die Daten kopiert werden sollen&#13;&#10;" Name="WriteDataOff"/>
	FUNCTION VIRTUAL GLOBAL WriteDataOff
		VAR_INPUT
			udLen 	: UDINT;			//! <Variable Comment=" Length of initialization data block" Name="WriteDataOff.udLen"/>
			udOff 	: UDINT;			//! <Variable Comment=" form this offset the data is read" Name="WriteDataOff.udOff"/>
			pData 	: ^USINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ENVStringAction::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_ENVSTRINGACTION
1$UINT, 0$UINT, (SIZEOF(::ENVStringAction))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(4210898976), "ENVStringAction", //Class
TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, //Baseclass
//Servers:
//Clients:
(::ENVStringAction.cAction.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4000930349), "cAction", 
END_FUNCTION


#define USER_CNT_ENVStringAction 52

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ENVStringAction] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ENVStringAction::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= String::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= VirtualBaseInit::Data.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, VirtualBaseInit::Data.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_ENVStringAction;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #WriteDataOff();

#pragma warning (default : 74)
	VirtualBaseInit::Data.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF VirtualBaseInit::Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL ENVStringAction::WriteDataOff
	VAR_INPUT
		udLen 	: UDINT;
		udOff 	: UDINT;
		pData 	: ^USINT;
	END_VAR

  String::WriteDataOff(udLen, udOff, pData);
  
  cAction.Write(input:=1);

END_FUNCTION
