//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "OPC_UA_ModuleBase"
	Revision           = "1.7"
	GUID               = "{0F909B3E-EA90-4F36-8E63-4A54CE71CB7E}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,120)">
	<Channels>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\OPC_UA_ModuleBase\OPC_UA_ModuleBase_DE.pdf"/>
			<File Path=".\Class\OPC_UA_ModuleBase\OPC_UA_ModuleBase_EN.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.7" Date="2020-10-27" Author="MehMar" Company="Sigmatek" Description="--&gt; Adaptation to the new OPC UA version"/>
		<Dokumentation Revision="1.6" Date="2020-02-06" Author="S3" Company="Sigmatek" Description="--&gt; new callback method CB_SetStringArray()"/>
		<Dokumentation Revision="1.5" Date="2018-11-08" Author="KaiAnd" Company="Sigmatek" Description="--&gt; new callback method CB_GetStringArray()&#13;&#10;--&gt; Extensions for the use of Euromap classes"/>
		<Dokumentation Revision="1.4" Author="KaiAnd" Company="Sigmatek" Description="inofficial Beta and RC version"/>
		<Dokumentation Revision="1.3" Date="2018-07-09" Author="3S" Company="3S" Description="new method AfterProviderInitialize()"/>
		<Dokumentation Revision="1.2" Date="2017-04-10" Author="3S" Company="3S" Description="implemeted base method &quot;InitProvider()&quot;"/>
		<Dokumentation Revision="1.1" Date="2017-03-21" Author="3S" Company="3S" Description="Redirect the callback to all modules (CB_activateDS, CB_prepaireDS, CB_alarmList, CB_fileSystem"/>
		<Dokumentation Revision="1.0" Date="2017-03-01" Author="3S" Company="3S" Description="Base class for feature specific OPC_UA modules."/>
	</RevDoku>
	<Network Name="OPC_UA_ModuleBase">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{BA52242E-696F-4809-9DBE-D571143AA204}"
				Class      = "OPC_UA_Base"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="OPC_UA"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.OPC_UA" Destination="this.OPC_UA" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using OPC_UA_Base

OPC_UA_ModuleBase : CLASS
: OPC_UA_Base
  //Servers:
  //Clients:
  //Variables:
		bInit 	: BOOL;
  //Functions:
				//! <Function Comment="Init method: will register this module in the OPC_UA server.&#13;&#10;&#13;&#10;The default value of &quot;multipleAllowed&quot; is FALSE. &#13;&#10;FALSE ... only one module of this type is allowed&#13;&#10;TRUE .... more than one modules of this type are allowed&#13;&#10;&#13;&#10;Overwrite this method if you want to register more than one modules of this type!" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="Background task." Name="Background"/>
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="This method is called cyclically because of the OPC_UA thread.&#13;&#10;&#13;&#10;ONLY overwrite it if you need functions synchron to the OPC_UA thread.&#13;&#10;Otherwise use the background task!" Name="OPC_UA_Thread"/>
	FUNCTION VIRTUAL GLOBAL OPC_UA_Thread;
				//! <Function Comment="Can be overwritten for provider initialization purposes.&#13;&#10;&#13;&#10;" Name="InitProvider"/>
	FUNCTION VIRTUAL GLOBAL InitProvider
		VAR_OUTPUT
			IsReady 	: DINT;			//! <Variable Comment="0 ... OK, ready" Name="InitProvider.IsReady"/>
		END_VAR;
				//! <Function Comment="If necessary, OPC_UA providers can be registered here.&#13;&#10;Method is called by OPC_UA during provider registration phase. " Name="RegisterProvider"/>
	FUNCTION VIRTUAL GLOBAL RegisterProvider
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 .. OK" Name="RegisterProvider.retcode"/>
		END_VAR;
				//! <Function Comment="If the class provides any known types, they will be registered when this function is called. Known types will be put to the encodeable types table which shall happen in this function." Name="RegisterTypes"/>
	FUNCTION VIRTUAL GLOBAL RegisterTypes
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns 0 in case all types have successfully been registered or an OPC_UA error code otherwise." Name="RegisterTypes.retcode"/>
		END_VAR;
				//! <Function Comment="Can be overwritten for module initialization purposes.&#13;&#10;Is called by OPC_UA during boot up until 0 is returned. &#13;&#10;&#13;&#10;OPC_UA server will NOT start until 0 is returned by every module!" Name="InitModule"/>
	FUNCTION VIRTUAL GLOBAL InitModule
		VAR_OUTPUT
			IsReady 	: DINT;			//! <Variable Comment="0 ... OK, ready" Name="InitModule.IsReady"/>
		END_VAR;
				//! <Function Comment="This method is called cyclically by the OPC_UA thread. &#13;&#10;It calls the method &quot;OPC_UA_Thread&quot; which can be overwritten for module-specific use." Name="OPC_UA_Run"/>
	FUNCTION GLOBAL OPC_UA_Run;
				//! <Function Comment="The method is called by OPC_UA when all providers have been initialized." Name="AfterProviderInitialize"/>
	FUNCTION VIRTUAL GLOBAL AfterProviderInitialize
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 .. OK" Name="AfterProviderInitialize.retcode"/>
		END_VAR;
				//! <Function Comment="Callback method, to be overwritten by user.&#13;&#10;Method is called whenever an OPC_UA Client tries to transfer and activate a dataset." Name="CB_activateDS"/>
	FUNCTION VIRTUAL GLOBAL CB_activateDS
		VAR_INPUT
			pID 	: ^CHAR;
			pName 	: ^CHAR;
			pPath 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="Callback method, to be overwritten by user.&#13;&#10;Method is called whenever an OPC_UA Client wants to receive a dataset. &#13;&#10;It&apos;s the command to the plc-program to save the data to the file. " Name="CB_prepaireDS"/>
	FUNCTION VIRTUAL GLOBAL CB_prepaireDS
		VAR_INPUT
			pID 	: ^CHAR;
			pName 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called from the OPC_UA in order to request full list of active alarms." Name="CB_alarmList"/>
	FUNCTION VIRTUAL GLOBAL CB_alarmList
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called whenever a File is changed by OPC_UA." Name="CB_fileSystem"/>
	FUNCTION VIRTUAL GLOBAL CB_fileSystem
		VAR_INPUT
			typ 	: DINT;
			pPath 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called whenever  OPC_UA needs a String-Array." Name="CB_GetStringArray"/>
	FUNCTION VIRTUAL GLOBAL CB_GetStringArray
		VAR_INPUT
			nodeId 	: ^OPCUA_NodeId;			//! <Variable Comment="pointer to the NodeID of the string array &#13;&#10;(get the NodeID for checking it via UA-Expert or from your Nodeset-XML)" Name="CB_GetStringArray.nodeId"/>
			list 	: ^OPC_UA::ptrOPCUA_String;			//! <Variable Comment="pointer to pointer to return the list with the string-pointers of the array" Name="CB_GetStringArray.list"/>
			listCount 	: ^UDINT;			//! <Variable Comment="pointer to return the number of strings in the list" Name="CB_GetStringArray.listCount"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK" Name="CB_GetStringArray.retcode"/>
		END_VAR;
				//! <Function Comment="Callback Method, to be overwritten by user.&#13;&#10;Method is called whenever  OPC_UA writes a String-Array." Name="CB_SetStringArray"/>
	FUNCTION VIRTUAL GLOBAL CB_SetStringArray
		VAR_INPUT
			nodeId 	: ^OPCUA_NodeId;			//! <Variable Comment="pointer to the NodeID of the string array &#13;&#10;(get the NodeID for checking it via UA-Expert or from your Nodeset-XML)" Name="CB_SetStringArray.nodeId"/>
			list 	: OPC_UA::ptrOPCUA_String;			//! <Variable Comment="pointer to the list with the string-pointers of the array" Name="CB_SetStringArray.list"/>
			listCount 	: UDINT;			//! <Variable Comment="number of strings in the list" Name="CB_SetStringArray.listCount"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0 = OK" Name="CB_SetStringArray.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB OPC_UA_ModuleBase::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_OPC_UA_MODULEBASE
1$UINT, 7$UINT, (SIZEOF(::OPC_UA_ModuleBase))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3992439982), "OPC_UA_ModuleBase", //Class
TO_UDINT(620072751), "OPC_UA_Base", 2$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_OPC_UA_ModuleBase 48

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_OPC_UA_ModuleBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION OPC_UA_ModuleBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= OPC_UA_Base::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= OPC_UA_Base::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, OPC_UA_Base::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_OPC_UA_ModuleBase;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #OPC_UA_Thread();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #InitProvider();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #RegisterProvider();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #RegisterTypes();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[40]		:= #InitModule();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[41]		:= #AfterProviderInitialize();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[42]		:= #CB_activateDS();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[43]		:= #CB_prepaireDS();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[44]		:= #CB_alarmList();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[45]		:= #CB_fileSystem();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[46]		:= #CB_GetStringArray();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[47]		:= #CB_SetStringArray();

#pragma warning (default : 74)
	OPC_UA_Base::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF OPC_UA_Base::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
9551CEC0F342212FF2412A957A14F99586E070383BC3DDA01CF15CB9A836EB8EB85CCBC9413AB70E2D5CD336AD8543DF91544CCB78C800E29F1FDCD3BEF4D880CA7542858CAC42E96CACAFF9E584873968985651D2FE0F197B88CB947FB09E3981B86D71
3A39C31263807CCC49A396D8F0A87998FF41AACBFEED1E676C5A021C1CEC596AD2EF35964446DD2CDF1AA45BBE3130C9553D072FBCECAB5DA99FFAF2B1640BA152C048763BD7B67DD1CE6894DABA482F8AFE6CFB232006929D81597EE242BEE2CCF3E4BF
012CF984564E4D13FE4FCA605E6865D0B98E63B2BC125502C136D069C78532A42FEBB5567679BCC8CCB4B8A7B7B160DE90903EEEA9976EEB70F6020BBFCDF18E5E96BDF5C52EAA5154EEB63E5409F66FDA78560DF3EDFDDF18D4AE39EB3F9CFF4A6EE294
98A588DEF1198FEE04C35417CFF2F9BDA1D9FD3C02FC3188A843859241905D87C6B19FAD14465E80852C88CDDB8C593D95FED9A136C7A518B2C0BA009C448ABD86681C6EC500AFAEF169A883BFF6FC25CC2AC654A654B6B7EB1AEFA200C834D08C7A9F72
F21AAF64B3CD662072F2278B10FAB2C315C29F5AD9FA18D8D2ACB964BBCC64DCE7194F6DC5812452A9997FC2C89FE587C869CB5847C517702E10939C56A30E538701D1284686544996D64D353FFF60094AD84DA86E718E8A071A48D9911AF750DD7E18EE
88F0AE5EC3CE399CFC047535C83DEFC13C0BA5BF205F56455E086810F9B9F351628CB7D6A23A420A854D87388D5F48C12DB7748EF871B371546DE008D488B9BD8532E0BA0A7DF24A52EB9A6742C478CBBAD4A757C743C9DC14E33882F150234744A5BDCB
1D383324AE05F03EF68EDDE470BA8A2190B568EB7E0659E8287E62C99CD813FEC168A639045BE63858ACA7DD1002E88B1AC21EFE09DE43DB4A63E81DA623F1E87AC174C9F78EBB8E1E2C96C5973307E47688CA03613CFCEC8A56D8EB20034CF252ADB9A4
CF4B80D9AAA0CB3760A3DE85256905B8A830F1E95AA450DE84DDF388004788B9BA207FEFC21B87937B47529C621560D09C1CDC22E127F3D60A4551394D8BC6C7FBBA09F4533ACCF22DE120A74A8C90399F1848883AC5B5CF8F792C482046E751F6D8A13D
B6E2AA60F8B7E3737990D7344821B0C024E51F46C07AB421761333075823208D016FEBC0609A1FF702B70875DCCDC746CC0CDD4F8117B05449F9775474CB57BD7E071E292A1C2840A18C0AF88CD32613E0E541954EEF8B5DD652E27B6A05247EB47EB91D
C488BAA516E6BEDCA8E74CF93AAE9722864A80B6EEF74FA880DFDFE825597EB5C192A251D91493164F9C947DA1D6126D999A6A672096E0133DF80D89E1C6E17FFEF2BFD5DFC1386E148C19FF1FDBCEC6A837CCEAD1FB162622D2AB7066E2644A4858B88D
ED5E30A7FF4235F7A7112AE8EA740F3ED66DCC05A6ABFA240967B9FDDFC092143AF932D3726884741D6157911D295137DF714A89FC49251312F6011682C5BCADD69D44290DA990FD968F544C2822C9813C21B864315AD52BB9229A67BBAF427891F4876E
F55C6F86C6E129030AA6840F925BACC74F2AA562799FDAE8018A989EF67950042C73DDC219D4C9C71AF62AB437A41E66B7E0B7F8B69453020287A4960661E6E65C152CBB589B302DA8CB01E9E413A396578DC586F05489DC59343E7CBC22A8BCA4A654A5
29C4A34CB90308FC60EB1AFAF7622014B6E5EAAF50C7C920F82BFDB8B5FF62AFCC0AB551EE936781FF100D6AD712DF206D032F05D0E2269E145B32DEAE1C0365810F9A97ABFA43BF03213D88493BFD1CEC328C99A65C96E9D97D59917C89B9C6751E8F66
64DDC568E4EB4E68CA866CF66309DD7D545357CD04A33079DBA6E897992B1ACC1C64E25D9EB7E215B5A9144327AD360B20319B3E0A50CD026557F88E68156ABA32CDD27CBF3DC8CBE2A1050A7AFCBA3CEA532509C1D615BF0831F619AD68C14F22D4EB50
5321DEAC143D0487C91896496EB62D5E6897BB84CF464AAAA21E0F553CE210E9148560BE9899FFE62986254B83FB5E34B06E6D167F6A167E1FF5BC4D4EFA06E08AED039CDF9E3F0E40D31589FF38F4581113DC3B9CD9FA11E65BD3959145D2184568BE35
B5E97F7F88BB69EA4BFD0C585129B877761A9C3DDBBF8E5EE39F2090BFCD9EBE13675F829A05E7138DA59E8F10A92E040910A25D014A2A2F738CC28235F509A1D02951BC460A6E6B8B724DC0F02A4A63E24E859B43141A97DA8FA44DA5D943078D49C7E5
ED2CD97AFF69E12E150C8B1E7C5F079E0DAD8E7BF3128FC3E1A7428ABB6A87C31C1A00760FB8E21F81A06571EEC7D28924571E942EA8502E90638B69EFAFECED1F904EAA4AD084504D8CDFA6D376F2E92C0F28311D4DDB0EBBEBCC922DFA04FA5102D25E
AE264D0F14947341CBD3031142F3E92759867258D6CD97CAA602F8D4DDD7ACA89C67868AE05A0FFF195B842ADAF79EFF644DB47982D01B2627CB65370C382D73F9F623279D1DCDA6118A7A4B6D2F9AF1802E9F41C4DFC2A3CC725B250651ABC768D967D5
56C9B2C4D9F4DB1DBC0B6280F6CA5E1FCE192AE6B2D339EF1A3C855C0A20834A88FB4E35544D8D353407E0E43D4A6E5B11D1F5520320BB8457B0B614C438692185EEDD6C8BE6071EA313727AFADEF2CA1A370B6A9B6671962094DB8FD4F32A9AB88C7CEB
1BCEB80A37DF61090E0016463FAB02A1351995F1CA89D120B7CCBFFE0DD7F41435FBEA7A1653C2FF4BB3D5B602A117F12D68CEA550BF247A5E3130EFF1646B36BC8D8A91911F9330C6B78746C2BF9D0B61FA11882850ECA3DD02D0C7FFEDDEC72FC19031
7FC1C4B2CCEAB3E0EDD964DBA8B37235E685B673FC7DDD85F78F549F823A13830657A8013B13B6377E2B99D96208013E2BA5053B804B975CA4EAFE9E0E8768F8907438170AEFA422A65BB661F69C517E47C18981949B01438AE0D5DB0D3B36ADE5B676AC
FD41F14A45A5E8A10304A66E2FA39CC7BA11D2CA75034788C6F40EF26D6218B42C77C78A8DD86EA2444D69BA63F67E682BE4D41F4B49A1164E2E34DB6DB4427FF935A7F6C36602191B215E1187E41FD256B2C91A4E026BD2BAF9032608AF3B8D238C27DC
29A23ADBF4F40C157BD4BA9D3693EEA356D3A1022EDDFC0DA7CAB834238BF600A3561FB1E0EA605B11E8C510B0A7D21CC586E8F877AA43E837890A291A7FEA9F58AD45FCF300F610BB952C9E3E0B3793321C1BCD221DC61727982118E72F4B051FB73041
CD9E363F7D7FB00E8D9F4073678C8A8F68528A9EB581C08962829B2F7797AE0445DBA12FFE5A9296650E5A4233012539DFF8098551DE22F56B2562990E4EF250BD256DAA95D397897F9640CBD8B9D90CC324932041063E4EC756D92C797F7F8AABF6E184
354A23A078D47372E26C1ECADF272380ABDCA59A64C8CBA18ECA6D2F3A58DDA5A4BE9108E87FF0622ED6CB880759EFA2634B9A2A8D20A5CBA63DCE24ACA5134A73414682B84B2B1B12CF2786E85733FC9E3802E2B86BC849E2A311B675AC5DD0C1A115E7
3ADB75ADFABBA58AEA73F699F356CCF775C4B380397D9685CA83B2915F01D2E07B323763B40D673AAA8BAEB8CD8757A2BE92F249E3172D412E861AF6EA8C6FE2E800534D1BE525A933960F66B498589CC1C95E2AC2695F0A6B39D4FF7B27140ADE2C275B
02F39DB17B6A6CD1B43AEFCAAA57B4A6043F804197AAA95E26EB55F68D9332D30C18D02855902A102D62906F41378CB47112BAC3BF769B77C2C5EC2318A17BA4E84F85CA50223CE79F42CE4C1773174F336A014668E8AF3DA4461FA3A366F996424B51A6
C7E6EF28932D5C1438C7F3385F7AC16D1E47ABDA57B8E6FB24291236C57FAACFBE4229BD9AB8786B29131004855759D245D04DB91429DC17A7F91F3CA4FA67AB9A8A191E88FB87B10550B2C83E41516CAD7E656CD509FE5566B1283F49C6B714C78988C3
7229C078D11970D8CDA063ABDB9C6F1EBEC82E87DF2328B868A97EB361277B2EC12D8E7F7281FA83667E60A32D3B5A8FDFB84B68C33AD3CF125B6BA09B0FD829AB731EBBCC198C5EDAF71BA67C6DB712A81EFE6087E50209435486D3CA6175751E8A462E
561EC29B4DA542B8E966B182223B1B2ABCE9B06A10D592ADAC657BA8975B865A11A911EBE85FE50F5A5E1E14D4CB88E5DD5458A77F3225860AB4DD9A7547308C565398DA5F96C13180E4888B3F1EF7A5802F4C2E50EB3CA31BEC3F7E2BCBDFCE64C0F25A
D2030DD6887D0EB1A87BF792DF625284EB1A1560A855AC6059F712B64537FD1C5E4760C2F9CFB25505B48B5865A99D0CCD9CD3C481C1A012B2727B2B38D8B1A5FF9FFAC9C2C4F56F20D3F02F46E19695BEF9740640A0E554AC6DB41F9EACEF40CC8A024E
FEECC310FB211625D9210E3A61C64A5F38E62D62A99CDEA5CBBFBE97CAEE84039A2AAC9560B622F15CA31A5B0C4290E7CA38BB15523120593A81F9DF5B7DE51B5D0A9804B0A40DAB7B7B2E9C211EFD0F9E6C68A4A3B1D7A1C7A7D89BD137B29C8BC4A66E
341A2059A626467E8A5F6FB731EBF79E5EE98998F5EA8BD64B951D12ED530FF885BFF6C2E7AFBBBA9F9F313D6589AF0D