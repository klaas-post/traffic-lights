//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TrafficLight"
	Revision           = "0.0"
	GUID               = "{DC83E519-1CA1-4097-9EE9-8EEDB9AE1C6D}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(496,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{D43DBC21-BCC5-4325-A3B3-DB1B224D469E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server
			Name           = "Svr_Light"
			GUID           = "{AFF77109-628C-42B4-889E-A62D17FCCE65}"
			Visualized     = "true"
			Initialize     = "true"
			DefValue       = "0"
			WriteProtected = "false"
			Retentive      = "false">
			<OPCSettingsDefault Visible="true"/>
		</Server>
		<Server Name="Svr_SwitchDelay" GUID="{548ED515-C36E-46D4-938F-34B1CC3C2576}" Visualized="false" Initialize="true" DefValue="1500" WriteProtected="false" Retentive="SRam"/>
	</Channels>
</Class>
*)
TrafficLight : CLASS
	TYPE
	  _LightColor :  //! <Type Public="true" Name="_LightColor"/>
	  (
	    eRed:=0,
	    eYellow:=1,
	    eGreen:=2
	  )$DINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Svr_Light 	: SvrCh__LightColor_PTofCls_TrafficLight;
	Svr_SwitchDelay 	: SvrCh_UDINT;
  //Clients:
  //Variables:
		tSignalChanged 	: UDINT;
		bStopSignal 	: BOOL;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL SetSignal
		VAR_INPUT
			ShouldStop 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TrafficLight::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TRAFFICLIGHT
0$UINT, 0$UINT, (SIZEOF(::TrafficLight))$UINT, 
3$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1430994866), "TrafficLight", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TrafficLight.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::TrafficLight.Svr_Light.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(761379002), "Svr_Light", 
(::TrafficLight.Svr_SwitchDelay.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3154802279), "Svr_SwitchDelay", 
//Clients:
END_FUNCTION


#define USER_CNT_TrafficLight 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TrafficLight] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TrafficLight::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TrafficLight, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Svr_Light.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Svr_Light.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Svr_SwitchDelay.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Svr_SwitchDelay.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

//----------------------------------------------------------------------------------------------------
//  Standard class methods
//----------------------------------------------------------------------------------------------------

// Standard Cywork, runs every set amount of time. 
FUNCTION VIRTUAL GLOBAL TrafficLight::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
    
        CASE Svr_Light OF

        // Svr_Light is Green -> Yellow
        eGreen:  
            IF bStopSignal THEN
                Svr_Light.Write(eYellow);
            END_IF;

        // Svr_Light is Yellow -> Red
        eYellow:
            IF (OPS.tAbsolute - tSignalChanged) > Svr_SwitchDelay THEN
                Svr_Light.Write(eRed);
            END_IF;
        
        // Svr_Light is Red -> Green
        eRed:
            IF bStopSignal = FALSE & (OPS.tAbsolute - tSignalChanged) > Svr_SwitchDelay THEN
                Svr_Light.Write(eGreen); 
            END_IF;
        END_CASE;

	state := READY;

END_FUNCTION

//----------------------------------------------------------------------------------------------------
//  Externally called methods
//----------------------------------------------------------------------------------------------------

// Sets the signal so the traffic light can turn to the right color.
FUNCTION GLOBAL TrafficLight::SetSignal
	VAR_INPUT
		ShouldStop 	: BOOL;
	END_VAR
    
    IF bStopSignal = ShouldStop THEN
        RETURN;
    END_IF;

    bStopSignal := ShouldStop;
    tSignalChanged := OPS.tAbsolute;

END_FUNCTION