//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "EnvironmentVariable"
	Revision           = "1.1"
	GUID               = "{D8677B2D-0088-48EC-9944-DEFA4440E621}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(534,120)"
	Comment            = "It is possible to handle a environment&#13;&#10;varialbe with this class. ( Get the value of&#13;&#10;the variable or change the value of the&#13;&#10;variable ) &#13;&#10;( SETENV XXXX YY in autoexec.lsl )">
	<Channels>
		<Server Name="sNumericValue" GUID="{20CAEB6A-1411-49B9-A40C-36F93AA26977}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Value as numeric of the environment variable&#13;&#10;( SETENV XXXX YY in autoexec.lsl -&gt;&#13;&#10;&quot;YY&quot; )"/>
		<Server Name="sRefresh" GUID="{DAE7F24B-F2C9-4150-A8E8-728468542C18}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="sStringValue" GUID="{24BF148C-9489-41FC-83B5-33A9210C2AFA}" Class="VirtualBaseInit" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Value as String of the environment variable&#13;&#10;( SETENV XXXX YY in autoexec.lsl -&gt;&#13;&#10;&quot;YY&quot; )"/>
		<Server Name="sVariableName" GUID="{27422C2A-7676-403B-85F7-3AA22F1E825C}" Class="VirtualBaseInit" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false" Comment="insert the name of the environment variable you are interested&#13;&#10;( SETENV XXXX YY in autoexec.lsl -&gt;&#13;&#10;insert &quot;XXXX&quot; )"/>
		<Client Name="ENVName" Required="true" Internal="true"/>
		<Client Name="ENVValue" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="hötant"/>
		<Dokumentation Revision="1.1" Date="2012-01-26" Author="spimar" Company="Sigmatek" Description="In method ReadEnvVariable now the right number of characters for the env. var. value is set;"/>
		<Dokumentation Revision="1.0" Date="2011-09-21" Author="hötant" Company="Sigmatek" Description="creation of class"/>
	</RevDoku>
	<Network Name="EnvironmentVariable">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{C2973D71-EF75-4005-8AF1-77F104FF54ED}"
				Class      = "ENVBase"
				Position   = "(150,120)"
				Visualized = "false">
				<Channels>
					<Server Name="sChangedVarName"/>
					<Server Name="sChangedVarValue"/>
					<Server Name="sStatus"/>
				</Channels>
			</Object>
			<Object
				Name       = "ENVName"
				GUID       = "{585F6BCA-991C-4C59-9DB1-3B3B8C4D6676}"
				Class      = "ENVStringAction"
				Position   = "(720,510)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="cAction"/>
				</Channels>
			</Object>
			<Object
				Name       = "ENVValue"
				GUID       = "{DA00CAAC-D22E-4808-8A86-52812DE40C00}"
				Class      = "ENVStringAction"
				Position   = "(720,690)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="cAction"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="ENVName.cAction" Destination="_base.sChangedVarName" Vertices="(720,600),(630,600),(630,480),(870,480),(870,270),(740,270),"/>
			<Connection Source="this.ENVName" Destination="ENVName.Data"/>
			<Connection Source="this.ENVValue" Destination="ENVValue.Data"/>
			<Connection Source="ENVValue.cAction" Destination="_base.sChangedVarValue" Vertices="(720,780),(570,780),(570,450),(840,450),(840,330),(740,330),"/>
			<Connection Source="this.sVariableName" Destination="ENVName.Data" Vertices="(1250,270),(990,270),(990,480),(1110,480),(1110,600),(1078,600),"/>
			<Connection Source="this.sStatus" Destination="_base.sStatus" Vertices="(1250,210),(740,210),"/>
			<Connection Source="this.sStringValue" Destination="ENVValue.Data" Vertices="(1250,330),(1020,330),(1020,450),(1170,450),(1170,780),(1078,780),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using ENVBase

EnvironmentVariable : CLASS
: ENVBase
  //Servers:
	sVariableName 	: SvrChCmd_UDINT;
	sStringValue 	: SvrChCmd_UDINT;
	sNumericValue 	: SvrCh_DINT;
	sRefresh 	: SvrCh_DINT;
  //Clients:
	ENVName 	: CltChCmd_ENVStringAction;
	ENVValue 	: CltChCmd_ENVStringAction;
  //Variables:
		firsttime 	: BOOL;			//! <Variable Comment="to get the value one time at startup" Name="firsttime"/>
  //Functions:
				//! <Function Comment="Get the value of the Environment&#13;&#10;variable at startup" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="react on a user action.&#13;&#10;(e.g.: change of variable name ,..)&#13;&#10;" Name="SomethingChanged"/>
	FUNCTION VIRTUAL GLOBAL SomethingChanged
		VAR_INPUT
			Reaseon 	: DINT;			//! <Variable Comment="0.. Varialbe name changed&#13;&#10;1.. Sting Value Variable Changed&#13;&#10;2.. Numeric Value Changed" Name="SomethingChanged.Reaseon"/>
		END_VAR;
				//! <Function Comment="get the value of an environmentvariable&#13;&#10;( sVariableName -&gt; name of the variable )" Name="ReadEnvVariable"/>
	FUNCTION ReadEnvVariable;
				//! <Function Comment="set the numeric value of the server&#13;&#10;sNumericValue to the variable define &#13;&#10;in server sVariableName." Name="WriteEnvVariableNumeric"/>
	FUNCTION WriteEnvVariableNumeric
		VAR_OUTPUT
			status 	: ENV_Status;			//! <Variable Comment="Errorcode of function :&#13;&#10;for description look at Type ENV_Status" Name="WriteEnvVariableNumeric.status"/>
		END_VAR;
				//! <Function Comment="set the string value of the server&#13;&#10;sStringValue to the variable define &#13;&#10;in server sVariableName." Name="WriteEnvVariableString"/>
	FUNCTION WriteEnvVariableString
		VAR_OUTPUT
			status 	: ENV_Status;			//! <Variable Comment="Errorcode of function :&#13;&#10;for description look at Type ENV_Status" Name="WriteEnvVariableString.status"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sNumericValue::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sRefresh::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using ENVStringAction


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB EnvironmentVariable::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_ENVIRONMENTVARIABLE
1$UINT, 1$UINT, (SIZEOF(::EnvironmentVariable))$UINT, 
4$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2870415996), "EnvironmentVariable", //Class
TO_UDINT(3728414750), "ENVBase", 1$UINT, 0$UINT, //Baseclass
//Servers:
(::EnvironmentVariable.sVariableName.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(666644596), "sVariableName", 
(::EnvironmentVariable.sStringValue.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(562903771), "sStringValue", 
(::EnvironmentVariable.sNumericValue.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4153611175), "sNumericValue", 
(::EnvironmentVariable.sRefresh.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2082712275), "sRefresh", 
//Clients:
(::EnvironmentVariable.ENVName.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1085053049), "ENVName", TO_UDINT(4210898976), "ENVStringAction", 1$UINT, 0$UINT, 
(::EnvironmentVariable.ENVValue.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3871185847), "ENVValue", TO_UDINT(4210898976), "ENVStringAction", 1$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_EnvironmentVariable 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_EnvironmentVariable] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION EnvironmentVariable::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= ENVBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= ENVBase::sStatus.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, ENVBase::sStatus.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_EnvironmentVariable;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #SomethingChanged();

#pragma warning (default : 74)
	ENVBase::sStatus.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ENVBase::sStatus.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sVariableName.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #sVariableName::M_WR_DIRECT();
	sVariableName.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sVariableName.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sStringValue.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Write		:= #sStringValue::M_WR_DIRECT();
	sStringValue.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sStringValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sNumericValue.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sNumericValue::Write() );
	IF sNumericValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sRefresh.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sRefresh::Write() );
	IF sRefresh.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL EnvironmentVariable::Init

  // get the value of the variable at startup
  if firsttime = FALSE then
    // only once at startup
    firsttime := TRUE;
    // read the value
    ReadEnvVariable();
  end_if;


END_FUNCTION

FUNCTION  EnvironmentVariable::ReadEnvVariable
  VAR
  	tmpLen            : udint;                     // length of the Variable name
    tmpVarName        : Array [0..199] of char;    // Variable name read from String Class
    tmpVarValue       : Array [0..199] of char;    // Value read from Environment Variable
    tmpVarValueRead   : Array [0..199] of char;    // Value read form String Class
    tmpformat         : bint;                      // format of the string
    tmpLen2           : udint;                     // length of the value 
    retcode           : dint;                      // Retcode of function getEnvironmentVariable
  END_VAR
  
  // initialize local variables
  tmpvarname[0]  :=0;
  tmpVarValue[0] :=0;
  tmpVarValueRead[0] :=0;

  // read the length of the variable name
  tmpLen := ENVName.GetLength();
  
  if tmpLen <> 0 then
    
    // correct the length in case of a to long name
    if tmpLen > (sizeof(tmpVarName)-1) then
      tmpLen := sizeof(tmpVarName)-1;
    end_if;
    
    // Read the name from the string object
    ENVName.ReadDataOff(udOff:=0, pData:=#tmpvarname[0], udMax:=tmpLen);
    // ascii termination
    tmpvarname[tmpLen] := 0;
    
    // read the environment variable 
    retcode := EnvironmentVariableLib.getEnvironmentVariable( pVariableName:=(#tmpvarname[0])$^char, 
                                                              pValue:=#tmpVarValue[0], 
                                                              MaxSizeValue:=sizeof(tmpVarValue));
    
    if retcode = 1 then
      // read the length of the old value
      tmpLen2 := ENVValue.GetLength();
      
      if tmpLen2 >= 0 then
        // correct the length in case of a to long value
        if tmpLen2 > (sizeof(tmpVarValueRead)-1) then
          tmpLen2 := sizeof(tmpVarValueRead)-1;
        end_if;
        
        // Read the value from the string object
        ENVValue.ReadDataOff(udOff:=0, pData:=#tmpVarValueRead[0], udMax:=tmpLen2);
        // ascii termination
        tmpVarValueRead[tmpLen2] := 0;
        
        // compare the read value with the old value and write if not equal
        if _stricmp(str1:=#tmpVarValueRead[0], str2:=#tmpVarValue[0]) <> 0 then
          // change the value at the string object
          ENVValue.WriteDataOff(udLen:=_strlen(src:=#tmpVarValue[0])+1, udOff:=0, pData:=#tmpVarValue[0]);
        end_if;
      else
        // no new write nessesary ( prevent recursion )
      end_if;
      
      // convert from ascii to bin and update the server
      sNumericValue := ASCII_BIN.Ascii2Bin(pta:=#tmpVarValue[0], ptb:=#tmpformat);
      sStatus := ENV_ValidValue;
    
    // Interface is not installed
    elsif retcode = -1 then
      sStatus := ENV_NoInterface;
    // no variable with this name found  
    elsif retcode = -2 then
      sStatus := ENV_VariableNameNotFound;
    end_if;  
  else
    // no variable name inseret at the string server
    sStatus := ENV_NoVariableName;
  end_if;
  
END_FUNCTION


FUNCTION EnvironmentVariable::WriteEnvVariableNumeric
	VAR_OUTPUT
		status 	: ENV_Status;
	END_VAR
  VAR
  	tmpLen            : udint;                     // length of the Variable name
    tmpVarName        : Array [0..199] of char;    // Variable name read from String Class
    tmpVarValue       : Array [0..199] of char;    // converted Numeric String
    retcode           : dint;                      // Retcode of function SetEnvironmentVariable
  END_VAR
  
  // initialize local variables
  tmpvarname[0]  :=0;
  tmpVarValue[0] :=0;

  // read the length of the variable name
  tmpLen := ENVName.GetLength();
  
  if tmpLen <> 0 then
    // correct the length in case of a to long name
    if tmpLen > (sizeof(tmpVarName)-1) then
      tmpLen := sizeof(tmpVarName)-1;
    end_if;
    
    // Read the variable name from the string object
    ENVName.ReadDataOff(udOff:=0, pData:=#tmpvarname[0], udMax:=tmpLen);
    
    // ascii termination
    tmpvarname[tmpLen] := 0;
    
    // convert from bin to ascii 
    ASCII_BIN.Bin2Ascii(pt:=#tmpVarValue[0], value:=sNumericValue, format:=16#800);
    
    // change the environment variable to new value
    retcode := EnvironmentVariableLib.SetEnvironmentVariable( pVariableName:=#tmpvarname[0], 
                                                              pValue:=#tmpVarValue[0]);
    
    // check for error
    case retcode of
      // no error
      1 : status := ENV_ValidValue;
      // no interface available
     -1 : status := ENV_NoInterface;
    end_case;
   
  else
    // no variable name inseret at the string server
    status := ENV_NoVariableName;
  end_if;




END_FUNCTION


FUNCTION EnvironmentVariable::WriteEnvVariableString
	VAR_OUTPUT
		status 	: ENV_Status;
	END_VAR
  VAR
  	tmpLen            : udint;                     // length of the Variable name
    tmpVarName        : Array [0..199] of char;    // Variable name read from String Class
    tmpVarValue       : Array [0..199] of char;    // Value read from Environment Variable
    tmpLen2           : udint;                     // length of the value 
    retcode           : dint;                      // Retcode of function SetEnvironmentVariable
  END_VAR
  
  // initialize local variables
  tmpvarname[0]  :=0;
  tmpVarValue[0] :=0;

  // read the length of the variable name
  tmpLen := ENVName.GetLength();
  
  if tmpLen <> 0 then
    
    // correct the length in case of a to long name
    if tmpLen > (sizeof(tmpVarName)-1) then
      tmpLen := sizeof(tmpVarName)-1;
    end_if;
    
    // Read the variable name from the string object
    ENVName.ReadDataOff(udOff:=0, pData:=#tmpvarname[0], udMax:=tmpLen);
    
    // ascii termination
    tmpvarname[tmpLen] := 0;
    
    // read the length of the value string
    tmpLen2 := ENVValue.GetLength();
    
    if tmpLen2 <> 0 then
      
      // correct the length in case of a to long value
      if tmpLen2 > (sizeof(tmpVarValue)-1) then
        tmpLen2 := sizeof(tmpVarValue)-1;
      end_if;
      
      // Read the value from the string object
      ENVValue.ReadDataOff(udOff:=0, pData:=#tmpVarValue[0], udMax:=tmpLen2);
      
      // ascii termination
      tmpVarValue[tmpLen2] := 0;
      
      // change the environment variable to new value
      retcode := EnvironmentVariableLib.SetEnvironmentVariable( pVariableName:=#tmpvarname[0], 
                                                                pValue:=#tmpVarValue[0]);
      
      // check for error
      case retcode of
        // no error
        1 : status := ENV_ValidValue;
        // no interface available
       -1 : status := ENV_NoInterface;
      end_case;
      
    else
  
      // no variable name inseret at the string server
      status := ENV_NoValueString;
    
    end_if;
    
  else
  
    // no variable name inseret at the string server
    status := ENV_NoVariableName;
    
  end_if;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL EnvironmentVariable::SomethingChanged
	VAR_INPUT
		Reaseon 	: DINT;
	END_VAR
  VAR
  	tmpStatus  : ENV_Status;        // State of Read or Write Function
  END_VAR

  
  case Reaseon of
  
  // Environment Variable name has changed
  0 : ReadEnvVariable();
  
  // StingValue of Environment Variable has changed
  1 : tmpStatus := WriteEnvVariableString();
      // check for errors
      if tmpStatus = ENV_ValidValue then
        // write was valid , reload the variable
        ReadEnvVariable();
      else
        sStatus := tmpstatus;
      end_if;
      
  // NumericValue of Environment Variable has changed.
  2 : tmpStatus := WriteEnvVariableNumeric();
      // check for errors
      if tmpStatus = ENV_ValidValue then
        // write was valid , reload the variable
        ReadEnvVariable();
      else
        sStatus := tmpstatus;
      end_if;
  
  end_case;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL EnvironmentVariable::sNumericValue::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	// save the new value
  sNumericValue := input;
  // call the change function ( Numeric value has changed )
  SomethingChanged(2);
  result := sNumericValue;

END_FUNCTION





FUNCTION VIRTUAL GLOBAL EnvironmentVariable::sRefresh::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	SomethingChanged(0);  
 	result := input;

END_FUNCTION
